[{"C:\\Users\\Dany\\Documents\\hosting\\projet\\client\\src\\index.js":"1","C:\\Users\\Dany\\Documents\\hosting\\projet\\client\\src\\App.js":"2","C:\\Users\\Dany\\Documents\\hosting\\projet\\client\\src\\components\\Navigation.js":"3","C:\\Users\\Dany\\Documents\\hosting\\projet\\client\\src\\pages\\Signin\\Signin.js":"4","C:\\Users\\Dany\\Documents\\hosting\\projet\\client\\src\\pages\\Rules\\Rules.js":"5","C:\\Users\\Dany\\Documents\\hosting\\projet\\client\\src\\pages\\Login\\Login.js":"6","C:\\Users\\Dany\\Documents\\hosting\\projet\\client\\src\\pages\\Jeu\\Jeu.js":"7","C:\\Users\\Dany\\Documents\\hosting\\projet\\client\\src\\pages\\Howto\\Howto.js":"8","C:\\Users\\Dany\\Documents\\hosting\\projet\\client\\src\\pages\\Profil\\Historique.js":"9","C:\\Users\\Dany\\Documents\\hosting\\projet\\client\\src\\pages\\Game\\Game.js":"10","C:\\Users\\Dany\\Documents\\hosting\\projet\\client\\src\\pages\\Profil\\Profil.js":"11","C:\\Users\\Dany\\Documents\\hosting\\projet\\client\\src\\components\\NavigationAutres.js":"12","C:\\Users\\Dany\\Documents\\hosting\\projet\\client\\src\\components\\NavigationHisto.js":"13","C:\\Users\\Dany\\Documents\\hosting\\projet\\client\\src\\components\\Carte.js":"14","C:\\Users\\Dany\\Documents\\hosting\\projet\\client\\src\\components\\NavigationProfil.js":"15","C:\\Users\\Dany\\Documents\\hosting\\projet\\client\\src\\pages\\Home\\Home.js":"16","C:\\Users\\Dany\\Documents\\hosting\\projet\\client\\src\\pages\\Home\\components\\Lobby.js":"17","C:\\Users\\Dany\\Documents\\hosting\\projet\\client\\src\\pages\\Home\\components\\Pool.js":"18"},{"size":728,"mtime":1629984165153,"results":"19","hashOfConfig":"20"},{"size":1805,"mtime":1629984165149,"results":"21","hashOfConfig":"20"},{"size":21371,"mtime":1629984396581,"results":"22","hashOfConfig":"20"},{"size":9109,"mtime":1629984396581,"results":"23","hashOfConfig":"20"},{"size":7129,"mtime":1629984165159,"results":"24","hashOfConfig":"20"},{"size":5139,"mtime":1629984396581,"results":"25","hashOfConfig":"20"},{"size":296,"mtime":1629984165156,"results":"26","hashOfConfig":"20"},{"size":3638,"mtime":1629984165156,"results":"27","hashOfConfig":"20"},{"size":2616,"mtime":1629984386913,"results":"28","hashOfConfig":"20"},{"size":28745,"mtime":1629984915452,"results":"29","hashOfConfig":"20"},{"size":5876,"mtime":1629984396581,"results":"30","hashOfConfig":"20"},{"size":1106,"mtime":1629984165150,"results":"31","hashOfConfig":"20"},{"size":2370,"mtime":1629984165151,"results":"32","hashOfConfig":"20"},{"size":806,"mtime":1629984165149,"results":"33","hashOfConfig":"20"},{"size":2378,"mtime":1629984165151,"results":"34","hashOfConfig":"20"},{"size":27787,"mtime":1629985210936,"results":"35","hashOfConfig":"20"},{"size":1187,"mtime":1629984165155,"results":"36","hashOfConfig":"20"},{"size":853,"mtime":1629984165155,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"149fgiu",{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"73","messages":"74","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78"},"C:\\Users\\Dany\\Documents\\hosting\\projet\\client\\src\\index.js",[],"C:\\Users\\Dany\\Documents\\hosting\\projet\\client\\src\\App.js",[],"C:\\Users\\Dany\\Documents\\hosting\\projet\\client\\src\\components\\Navigation.js",["79"],"import React, { Component } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { ButtonGroup, Button, Row, Col, Container } from 'react-bootstrap';\r\nimport Home from '../pages/Home/Home';\r\nimport Howto from '../pages/Howto/Howto'; \r\nimport Rules from '../pages/Rules/Rules';\r\nimport CookieConsent from 'react-cookie-consent';\r\nimport Popup from 'reactjs-popup';\r\n\r\n//import Login from '../pages/Login/Login'\r\n\r\nclass Navigation extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state={\r\n           connected: localStorage.getItem('Connect'),\r\n           connectedAsGuest: localStorage.getItem('ConnectedAsGuest'),\r\n           guestPseudo : localStorage.getItem('guestPseudo'),\r\n           cookiesAccept : localStorage.getItem('Cookies'),\r\n           donneesGuest:''\r\n        \r\n        \r\n           } \r\n        this.handleClick = this.handleClick.bind(this);\r\n        this.handleLoginGuest = this.handleLoginGuest.bind(this);\r\n        \r\n      }\r\n    \r\n\r\n  \r\n    pageSwitch= () => {\r\n\r\n        const actualPage = this.props.actualPage;\r\n        switch(actualPage){\r\n            \r\n            case 'howto':\r\n                return <Howto/>;\r\n            case 'rules':\r\n                return <Rules/>;\r\n            default :\r\n                return <Home OnClick = {this.createGame}/>;\r\n        }\r\n      }\r\n\r\n    createGame = (name) => {\r\n        this.props.actionSwitchPage(name);\r\n    }\r\n\r\n\r\n    handleClick=() => {\r\n        this.setState({connected: false})\r\n        localStorage.setItem('Connect', false)\r\n        this.setState({connectedAsGuest: false})\r\n        localStorage.setItem('ConnectedAsGuest', false)\r\n        window.location.href= \"http://135.125.101.210/\"\r\n        \r\n    }\r\n\r\n    async handleLoginGuest(event){\r\n        event.preventDefault();\r\n        localStorage.setItem('ConnectedAsGuest', true)\r\n        console.log(this.state.guestPseudo)\r\n        fetch('http://135.125.101.210:5000/guest', {\r\n            method: 'POST',\r\n            headers: {\r\n                Accept: 'application/json',\r\n                'Content-Type': 'application/json',\r\n                \"Acces-Control-Allow-Origin\": \"true\"\r\n            },\r\n        }).then(response => response.json())\r\n            .then(json => {\r\n                \r\n            }).catch((error) => {\r\n\r\n            });\r\n            \r\n            \r\n            \r\n            \r\n            //afficher en tant qu'user connecté\r\n\r\n        console.log(this.state.donneesGuest.Pseudo)\r\n           \r\n        \r\n\r\n\r\n        await fetch(`http://135.125.101.210:5000/pseudoguest`)\r\n          .then(response => response.json())\r\n          .then(json => {\r\n            this.setState({donneesGuest: json[0].Pseudo})\r\n            \r\n          })\r\n          \r\n          \r\n        \r\n        localStorage.setItem('guestPseudo', this.state.donneesGuest)  \r\n        window.location.href= \"http://135.125.101.210/\"  \r\n    }\r\n\r\n    \r\n    render() {\r\n        \r\n        if(this.state.connected===\"true\"){\r\n            return (\r\n                <main id=\"maincomponent\">\r\n                    <Container fluid=\"lg\">\r\n                        <Row>\r\n                            <Col md=\"auto\" style={{\r\n                                border: '2px solid moccasin',\r\n                                borderRadius: '10px',\r\n                                backgroundColor: 'palegoldenrod'\r\n                            }}>\r\n                                <NavLink to=\"/\" exact className=\"hover\" activeClassName='nav-active'>\r\n                                    <h1 style={{\r\n                                        fontSize: 64,\r\n                                    }}>Président Online</h1>\r\n                                </NavLink>\r\n                            </Col>\r\n                            <Col />\r\n                            <Col />\r\n                            <Col />\r\n                            <Col md='auto'>\r\n    \r\n                                {/* On déplacera le contenu de ce container par une fonction Auth qui, lors de la connexion affichera un bouton profil */}\r\n                                <Container fluid=\"lg\" style={{\r\n                                    border: '2px solid moccasin',\r\n                                    borderRadius: '10px',\r\n                                    backgroundColor: 'palegoldenrod'\r\n                                }}>\r\n                                    <Row className=\"justify-content-md-center\">\r\n                                        <Col md={8}>\r\n                                            <h2 style={{ textAlign: \"center\", fontSize: 32 }}> Account </h2>\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row>\r\n                                        <Col sm='auto'>\r\n                                            <NavLink to=\"/profile\" className=\"hover\" activeClassName='nav-active'>\r\n                                                <h4 style={{ textAlign: \"center\", fontSize: 24 }}>Profile</h4>\r\n                                            </NavLink>\r\n                                            <Button onClick={this.handleClick}>Log out</Button>\r\n                                        </Col>\r\n                                        <Col />\r\n                                    </Row>\r\n                                </Container>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                    <br/>\r\n                    <Container fluid=\"lg\">\r\n                        <Row>\r\n                            <Col fluid=\"md\" lg={2}>\r\n                                <Container style={{\r\n                                    height: 'auto',\r\n                                }}>\r\n                                    <Col md='auto' style={{\r\n                                        border: '2px solid moccasin',\r\n                                        borderRadius: '10px',\r\n                                        backgroundColor: 'palegoldenrod',\r\n                                        height: '400px'\r\n                                    }}>\r\n                                        <Row>\r\n                                            <h2 style={{\r\n                                                display: 'block',\r\n                                                margin: 'auto'\r\n                                            }}> Menu </h2>\r\n                                        </Row>\r\n                                        <br /><br />\r\n                                        <Row className=\"justify-content-md-center\">\r\n                                            <ButtonGroup vertical center>\r\n                                                <Button\r\n                                                    variant=\"outline-info\"\r\n                                                    size=\"lg\"\r\n                                                    onClick={() => this.props.actionSwitchPage(\"home\")}\r\n                                                >Home</Button>\r\n                                                <br />\r\n                                                <Button\r\n                                                    variant=\"outline-info\"\r\n                                                    size=\"lg\"\r\n                                                    onClick={() => this.props.actionSwitchPage(\"howto\")}\r\n                                                >How to play ?</Button>\r\n                                                <br />\r\n                                                <Button\r\n                                                    variant=\"outline-info\"\r\n                                                    size=\"lg\"\r\n                                                    onClick={() => this.props.actionSwitchPage(\"rules\")}\r\n                                                >Rules</Button>\r\n                                            </ButtonGroup>\r\n                                        </Row>\r\n                                    </Col>\r\n                                </Container>\r\n                            </Col>\r\n                            <Col fluid>\r\n                                {this.pageSwitch()}\r\n                            </Col>\r\n                        </Row>\r\n    \r\n                    </Container>\r\n                    <CookieConsent\r\n                                onAccept={localStorage.setItem('Cookies',true)}\r\n                                location=\"bottom\"\r\n                                style={{ backgroundColor : 'DarkRed', fontSize:20}}\r\n                                buttonStyle={{backgroundColor:\"palegoldenrod\", fontSize:20}}\r\n                                buttonText=\"I agree !\"\r\n                                expires={365}>\r\n                             \r\n                                This website uses cookies, accept them to remove the banner\r\n                    </CookieConsent> \r\n                </main>\r\n            );\r\n                                        \r\n        }\r\n\r\n        if(this.state.connectedAsGuest===\"true\"){\r\n            return (\r\n                <main id=\"maincomponent\">\r\n                    <Container fluid=\"lg\">\r\n                        <Row>\r\n                            <Col md=\"auto\" style={{\r\n                                border: '2px solid moccasin',\r\n                                borderRadius: '10px',\r\n                                backgroundColor: 'palegoldenrod'\r\n                            }}>\r\n                                <NavLink to=\"/\" exact className=\"hover\" activeClassName='nav-active'>\r\n                                    <h1 style={{\r\n                                        fontSize: 64,\r\n                                    }}>Président Online</h1>\r\n                                </NavLink>\r\n                            </Col>\r\n                            <Col />\r\n                            <Col />\r\n                            <Col />\r\n                            <Col md='auto'>\r\n    \r\n                                {/* On déplacera le contenu de ce container par une fonction Auth qui, lors de la connexion affichera un bouton profil */}\r\n                                <Container fluid=\"lg\" style={{\r\n                                    border: '2px solid moccasin',\r\n                                    borderRadius: '10px',\r\n                                    backgroundColor: 'palegoldenrod'\r\n                                }}>\r\n                                    \r\n                                    <Row>\r\n                                        <Col sm='auto'>\r\n                                            <Button onClick={this.handleClick}>Log out</Button>\r\n                                        </Col>\r\n                                        <Col />\r\n                                    </Row>\r\n                                </Container>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                    <br/>\r\n                    <Container fluid=\"lg\">\r\n                        <Row>\r\n                            <Col fluid=\"md\" lg={2}>\r\n                                <Container style={{\r\n                                    height: 'auto',\r\n                                }}>\r\n                                    <Col md='auto' style={{\r\n                                        border: '2px solid moccasin',\r\n                                        borderRadius: '10px',\r\n                                        backgroundColor: 'palegoldenrod',\r\n                                        height: '400px'\r\n                                    }}>\r\n                                        <Row>\r\n                                            <h2 style={{\r\n                                                display: 'block',\r\n                                                margin: 'auto'\r\n                                            }}> Menu </h2>\r\n                                        </Row>\r\n                                        <br /><br />\r\n                                        <Row className=\"justify-content-md-center\">\r\n                                            <ButtonGroup vertical center>\r\n                                                <Button\r\n                                                    variant=\"outline-info\"\r\n                                                    size=\"lg\"\r\n                                                    onClick={() => this.props.actionSwitchPage(\"home\")}\r\n                                                >Home</Button>\r\n                                                <br />\r\n                                                <Button\r\n                                                    variant=\"outline-info\"\r\n                                                    size=\"lg\"\r\n                                                    onClick={() => this.props.actionSwitchPage(\"howto\")}\r\n                                                >How to play ?</Button>\r\n                                                <br />\r\n                                                <Button\r\n                                                    variant=\"outline-info\"\r\n                                                    size=\"lg\"\r\n                                                    onClick={() => this.props.actionSwitchPage(\"rules\")}\r\n                                                >Rules</Button>\r\n                                            </ButtonGroup>\r\n                                        </Row>\r\n                                    </Col>\r\n                                </Container>\r\n                            </Col>\r\n                            <Col fluid>\r\n                                {this.pageSwitch()}\r\n                            </Col>\r\n                        </Row>\r\n    \r\n                    </Container>\r\n\r\n                    <CookieConsent\r\n                                onAccept={localStorage.setItem('Cookies',true)}\r\n                                location=\"bottom\"\r\n                                style={{ backgroundColor : 'DarkRed', fontSize:20}}\r\n                                buttonStyle={{backgroundColor:\"palegoldenrod\", fontSize:20}}\r\n                                buttonText=\"I agree !\"\r\n                                expires={365}>\r\n                             \r\n                                This website uses cookies, accept them to remove the banner\r\n                    </CookieConsent>\r\n                </main>\r\n            );\r\n                                        \r\n        } \r\n\r\n    \r\n        else{\r\n            return (\r\n                <main id=\"maincomponent\">\r\n                    <Container fluid=\"lg\">\r\n                        <Row>\r\n                            <Col md=\"auto\" style={{\r\n                                border: '2px solid moccasin',\r\n                                borderRadius: '10px',\r\n                                backgroundColor: 'palegoldenrod'\r\n                            }}>\r\n                                <NavLink to=\"/\" exact className=\"hover\" activeClassName='nav-active'>\r\n                                    <h1 style={{\r\n                                        fontSize: 64,\r\n                                    }}>Président Online</h1>\r\n                                </NavLink>\r\n                            </Col>\r\n                            <Col />\r\n                            <Col />\r\n                            <Col />\r\n                            <Col md='auto'>\r\n    \r\n                                {/* On déplacera le contenu de ce container par une fonction Auth qui, lors de la connexion affichera un bouton profil */}\r\n                                <Container fluid=\"lg\" style={{\r\n                                    border: '2px solid moccasin',\r\n                                    borderRadius: '10px',\r\n                                    backgroundColor: 'palegoldenrod'\r\n                                }}>\r\n                                    \r\n                                    <Row>\r\n                                        <Col sm='auto'>\r\n                                            <NavLink to=\"/signin\" className=\"hover\" activeClassName='nav-active'>\r\n                                                <h4 style={{ textAlign: \"center\", fontSize: 24 }}>Sign In</h4>\r\n                                            </NavLink>\r\n                                        </Col>\r\n                                        <Col />\r\n                                        <Col sm='auto'>\r\n                                            <NavLink to=\"/login\" className=\"hover\" activeClassName='nav-active'>\r\n                                                <h4 style={{ textAlign: \"center\", fontSize: 24 }}>Log In</h4>\r\n                                            </NavLink>\r\n                                        </Col>\r\n                                    </Row>\r\n                                    <Row>\r\n                                        <Col>\r\n                                        <Button\r\n                                            variant=\"outline-info\"\r\n                                            size=\"lg\"\r\n                                            onClick={this.handleLoginGuest}    \r\n                                        >\r\n                                            Log in as a guest\r\n                                        </Button>\r\n                                        </Col>\r\n                                    </Row>\r\n                                </Container>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                    <br/>\r\n                    <Container fluid>\r\n                        <Row fluid=\"xl\"> \r\n                            <Col fluid=\"md\" lg={2}>\r\n                                <Container style={{\r\n                                    height: 'auto',\r\n                                }}>\r\n                                    <Col md='auto' style={{\r\n                                        border: '2px solid moccasin',\r\n                                        borderRadius: '10px',\r\n                                        backgroundColor: 'palegoldenrod',\r\n                                        height: '400px'\r\n                                    }}>\r\n                                        <Row>\r\n                                            <h2 style={{\r\n                                                display: 'block',\r\n                                                margin: 'auto'\r\n                                            }}> Menu </h2>\r\n                                        </Row>\r\n                                        <br /><br />\r\n                                        <Row className=\"justify-content-md-center\">\r\n                                            <ButtonGroup vertical center>\r\n                                                <Button\r\n                                                    variant=\"outline-info\"\r\n                                                    size=\"lg\"\r\n                                                    onClick={() => this.props.actionSwitchPage(\"home\")}\r\n                                                >Home</Button>\r\n                                                <br />\r\n                                                <Button\r\n                                                    variant=\"outline-info\"\r\n                                                    size=\"lg\"\r\n                                                    onClick={() => this.props.actionSwitchPage(\"howto\")}\r\n                                                >How to play ?</Button>\r\n                                                <br />\r\n                                                <Button\r\n                                                    variant=\"outline-info\"\r\n                                                    size=\"lg\"\r\n                                                    onClick={() => this.props.actionSwitchPage(\"rules\")}\r\n                                                >Rules</Button>\r\n                                            </ButtonGroup>\r\n                                        </Row>\r\n                                    </Col>\r\n                                </Container>\r\n                            </Col>\r\n                            <Col className=\"justify-content-xl-center\">\r\n                                {this.pageSwitch()}\r\n                            </Col>\r\n                        </Row>\r\n    \r\n                    </Container>\r\n                    \r\n                    <CookieConsent\r\n                                onAccept={localStorage.setItem('Cookies',true)}\r\n                                location=\"bottom\"\r\n                                style={{ backgroundColor : 'DarkRed', fontSize:20}}\r\n                                buttonStyle={{backgroundColor:\"palegoldenrod\", fontSize:20}}\r\n                                buttonText=\"I agree !\"\r\n                                expires={365}>\r\n                             \r\n                                This website uses cookies, accept them to remove the banner\r\n                    </CookieConsent>\r\n                \r\n                </main>\r\n            );\r\n        }\r\n        \r\n    };\r\n}\r\n\r\nexport default Navigation;\r\n","C:\\Users\\Dany\\Documents\\hosting\\projet\\client\\src\\pages\\Signin\\Signin.js",[],"C:\\Users\\Dany\\Documents\\hosting\\projet\\client\\src\\pages\\Rules\\Rules.js",[],"C:\\Users\\Dany\\Documents\\hosting\\projet\\client\\src\\pages\\Login\\Login.js",["80"],"import React from \"react\";\r\nimport NavigationAutres from \"../../components/NavigationAutres\";\r\nimport Col from 'react-bootstrap/Col'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Container from 'react-bootstrap/Container'\r\nimport CookieConsent from 'react-cookie-consent';\r\n\r\nclass Signin extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n       \r\n        this.state={\r\n            email:'',\r\n            password:'',\r\n            bdd:'',\r\n            emailsPassbdd:'',\r\n            connected:false,\r\n            passwordtest:'',\r\n            \r\n   \r\n        }\r\n        \r\n\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n      }\r\n\r\n      \r\n\r\n      \r\n\r\n      handleSubmit(event) {\r\n        event.preventDefault();\r\n        \r\n\r\n\r\n        \r\n       \r\n\r\n        for (let i=0; i<this.state.bdd.length;i++){\r\n            if (this.state.email !== this.state.bdd[i].Email){\r\n            }\r\n            else{\r\n                //alert(\"Mail in bdd\")\r\n                this.state.passwordtest = this.state.bdd[i].Password\r\n                /*let pass=this.state.password\r\n                var bcrypt = require('bcryptjs');\r\n                bcrypt.genSalt(10,function(err,salt){\r\n                    bcrypt.hash(pass, salt, function(err, hash){\r\n                    })\r\n                })*/\r\n                \r\n                var bcrypt = require('bcryptjs');\r\n                bcrypt.compare( this.state.password,this.state.bdd[i].Password, function(err,res){\r\n                    if(res){\r\n                        \r\n                        localStorage.setItem('Connect', true)\r\n                        \r\n                        window.location.href= \"http://135.125.101.210/\"\r\n                        }\r\n                       \r\n                })\r\n                \r\n                localStorage.setItem('Email', this.state.email)\r\n                localStorage.setItem('Pseudo', this.state.bdd[i].Pseudo)\r\n                localStorage.getItem('Connect')\r\n                /*\r\n                localStorage.setItem('Connect', true)\r\n                localStorage.setItem('Email', this.state.email)\r\n                localStorage.setItem('Pseudo', this.state.bdd[i].Pseudo)\r\n                localStorage.getItem('Connect')\r\n                window.location.href= \"http://135.125.101.210/\" */\r\n            }\r\n        }\r\n      }\r\n\r\n      componentDidMount(){\r\n        localStorage.setItem('Connect',false)\r\n          fetch('http://135.125.101.210:5000/loginall')\r\n          .then(response => response.json())\r\n          .then(json => {\r\n            \r\n            this.setState({bdd: json})\r\n            \r\n          })\r\n      }\r\n\r\n     \r\n\r\n    render() {\r\n        return (\r\n            <html>\r\n                <Row>  \r\n                    <Col>\r\n                        <div class=\"hautpage\">\r\n                            <NavigationAutres />\r\n                        </div> \r\n                    </Col> \r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <form onSubmit={this.handleSubmit}>\r\n                            <Container>\r\n                                <Col className=\"mt-5\">\r\n                                    <label style={{textAlign: \"center\", fontSize: 30, color:'white',marginTop:'10%',marginLeft:'33%',marginRight:'67%'}}>\r\n                                        Email :\r\n                                        <input type=\"text\" value={this.state.email} onChange={text => this.setState({email: text.target.value})} />\r\n                                    </label>\r\n                                </Col>\r\n                                <Col className=\"mt-5\">\r\n                                    <label style={{textAlign: \"center\", fontSize: 30, color:'white',marginTop:'4%',marginLeft:'33%',marginRight:'67%'}}>\r\n                                        Password :\r\n                                        <input type=\"password\" value={this.state.password} onChange={text => this.setState({password: text.target.value})} />\r\n                                    </label>\r\n                                    <br></br><br></br><br></br>\r\n                                    <input style={{textAlign: \"center\", fontSize: 45, color:'red',marginTop:'5%', marginLeft:'39%'}} type=\"submit\" value=\"Connexion\" />\r\n                                </Col>\r\n                            </Container>\r\n                        </form>  \r\n                    </Col>\r\n                </Row> \r\n                <CookieConsent\r\n                                onAccept={localStorage.setItem('Cookies',true)}\r\n                                location=\"bottom\"\r\n                                style={{ backgroundColor : 'DarkRed', fontSize:20}}\r\n                                buttonStyle={{backgroundColor:\"palegoldenrod\", fontSize:20}}\r\n                                buttonText=\"I agree !\"\r\n                                expires={365}>\r\n                             \r\n                                This website uses cookies, accept them to remove the banner\r\n                </CookieConsent>    \r\n            </html>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Signin","C:\\Users\\Dany\\Documents\\hosting\\projet\\client\\src\\pages\\Jeu\\Jeu.js",[],"C:\\Users\\Dany\\Documents\\hosting\\projet\\client\\src\\pages\\Howto\\Howto.js",[],"C:\\Users\\Dany\\Documents\\hosting\\projet\\client\\src\\pages\\Profil\\Historique.js",[],"C:\\Users\\Dany\\Documents\\hosting\\projet\\client\\src\\pages\\Game\\Game.js",["81","82","83","84","85","86"],"import React, { Component } from \"react\";\r\nimport { Button, Row, Col, Container, Alert } from 'react-bootstrap';\r\nimport Carte from '../../components/Carte'\r\nimport io from \"socket.io-client\";\r\n\r\n/* TODO :   connexion a la game\r\n            token\r\n\r\n            Reconnection si deco\r\n            fin de round\r\n            fin de game\r\n            envoi stats\r\n            page de fin\r\n\r\n*/\r\nlet gameSocket\r\n\r\nclass Game extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        /*********** Global Variables ***********/\r\n\r\n        this.state = {\r\n            /* Usefull variables*/\r\n            playerToken: 0,\r\n            selectedCard: [],\r\n            switcher: false,\r\n            errorMessage: { type: null, title: null, message: null, variant: null },\r\n            game_id : localStorage.getItem('gameId'),\r\n            currentUser: localStorage.getItem('pseudo'),\r\n            orderTurn: localStorage.getItem('turn').split(','),\r\n            countTurn: 0,\r\n            countRound: 0,\r\n\r\n            /* Test variable */\r\n            testChgPile: [5, 18],\r\n            testChgPile2: [13],\r\n\r\n            /* socket io */\r\n            connectionConfig: {\r\n                \"force new connection\": true,\r\n                \"reconnectionAttemps\": \"Infinity\",\r\n                \"timeout\": 75,\r\n                \"transports\": [\"websocket\",\"polling\"],\r\n                \"path\": '/app1socket'\r\n            },\r\n            endpoint: 'htpp://135.125.101.210:5002/app1socket',\r\n\r\n            /* RAW DATA */\r\n            playersData: null,\r\n            data: null,\r\n\r\n            /* PLAYERS */\r\n            players: [],\r\n            player1: { pseudo: null, cards: [], set: false, connected : false },\r\n            player2: { pseudo: null, cards: [], set: false, connected : false },\r\n            player3: { pseudo: null, cards: [], set: false, connected : false },\r\n            player4: { pseudo: null, cards: [], set: false, connected : false },\r\n            player5: { pseudo: null, cards: [], set: false, connected : false },\r\n\r\n            /* STYLE */\r\n            defStyle: { display: 'flex', justifyContent: 'center', alignItems: 'center' },\r\n            cardStyle: { border: '2px solid red', borderRadius: '10px', },\r\n\r\n            /* VISIBLE CARDS */\r\n            pile: [],\r\n            playerCard: [],\r\n\r\n            /* List of all card, refers to their .png */\r\n            cardList: {\r\n                ace: ['1', '14', '27', '40'],\r\n                two: ['2', '15', '28', '41'],\r\n                three: ['3', '16', '29', '42'],\r\n                four: ['4', '17', '30', '43'],\r\n                five: ['5', '18', '31', '44'],\r\n                six: ['6', '19', '32', '45'],\r\n                seven: ['7', '20', '33', '46'],\r\n                eight: ['8', '21', '34', '47'],\r\n                nine: ['9', '22', '35', '48'],\r\n                ten: ['10', '23', '36', '49'],\r\n                jack: ['11', '24', '37', '50'],\r\n                queen: ['12', '25', '38', '51'],\r\n                king: ['13', '26', '39', '52'],\r\n\r\n            }\r\n\r\n        }\r\n        gameSocket = io.connect(this.state.endpoint, this.state.connectionConfig)\r\n\r\n    }\r\n\r\n    /********************** Game Function **********************/\r\n\r\n    /***********  ***********/\r\n\r\n    whatCardIs = (num) => {\r\n        // RETURN -1 IF NOT\r\n        if (this.state.cardList.ace.indexOf(String(num)) !== -1) {\r\n            switch (this.state.cardList.ace.indexOf(String(num))) {\r\n                case 0: return '15:s';\r\n                case 1: return '15:h';\r\n                case 2: return '15:c';\r\n                case 3: return '15:d';\r\n                default: return 0;\r\n            }\r\n        } else if (this.state.cardList.two.indexOf(String(num)) !== -1) {\r\n            switch (this.state.cardList.two.indexOf(String(num))) {\r\n                case 0: return '20:s';\r\n                case 1: return '20:h';\r\n                case 2: return '20:c';\r\n                case 3: return '20:d';\r\n                default: return 0;\r\n            }\r\n        } else if (this.state.cardList.three.indexOf(String(num)) !== -1) {\r\n            switch (this.state.cardList.three.indexOf(String(num))) {\r\n                case 0: return '3:s';\r\n                case 1: return '3:h';\r\n                case 2: return '3:c';\r\n                case 3: return '3:d';\r\n                default: return 0;\r\n            }\r\n        } else if (this.state.cardList.four.indexOf(String(num)) !== -1) {\r\n            switch (this.state.cardList.four.indexOf(String(num))) {\r\n                case 0: return '4:s';\r\n                case 1: return '4:h';\r\n                case 2: return '4:c';\r\n                case 3: return '4:d';\r\n                default: return 0;\r\n            }\r\n        } else if (this.state.cardList.five.indexOf(String(num)) !== -1) {\r\n            switch (this.state.cardList.five.indexOf(String(num))) {\r\n                case 0: return '5:s';\r\n                case 1: return '5:h';\r\n                case 2: return '5:c';\r\n                case 3: return '5:d';\r\n                default: return 0;\r\n            }\r\n        } else if (this.state.cardList.six.indexOf(String(num)) !== -1) {\r\n            switch (this.state.cardList.six.indexOf(String(num))) {\r\n                case 0: return '6:s';\r\n                case 1: return '6:h';\r\n                case 2: return '6:c';\r\n                case 3: return '6:d';\r\n                default: return 0;\r\n            }\r\n        } else if (this.state.cardList.seven.indexOf(String(num)) !== -1) {\r\n            switch (this.state.cardList.seven.indexOf(String(num))) {\r\n                case 0: return '7:s';\r\n                case 1: return '7:h';\r\n                case 2: return '7:c';\r\n                case 3: return '7:d';\r\n                default: return 0;\r\n            }\r\n        } else if (this.state.cardList.eight.indexOf(String(num)) !== -1) {\r\n            switch (this.state.cardList.eight.indexOf(String(num))) {\r\n                case 0: return '8:s';\r\n                case 1: return '8:h';\r\n                case 2: return '8:c';\r\n                case 3: return '8:d';\r\n                default: return 0;\r\n            }\r\n        } else if (this.state.cardList.nine.indexOf(String(num)) !== -1) {\r\n            switch (this.state.cardList.nine.indexOf(String(num))) {\r\n                case 0: return '9:s';\r\n                case 1: return '9:h';\r\n                case 2: return '9:c';\r\n                case 3: return '9:d';\r\n                default: return 0;\r\n            }\r\n        } else if (this.state.cardList.ten.indexOf(String(num)) !== -1) {\r\n            switch (this.state.cardList.ten.indexOf(String(num))) {\r\n                case 0: return '10:s';\r\n                case 1: return '10:h';\r\n                case 2: return '10:c';\r\n                case 3: return '10:d';\r\n                default: return 0;\r\n            }\r\n        } else if (this.state.cardList.jack.indexOf(String(num)) !== -1) {\r\n            switch (this.state.cardList.jack.indexOf(String(num))) {\r\n                case 0: return '11:s';\r\n                case 1: return '11:h';\r\n                case 2: return '11:c';\r\n                case 3: return '11:d';\r\n                default: return 0;\r\n            }\r\n        } else if (this.state.cardList.queen.indexOf(String(num)) !== -1) {\r\n            switch (this.state.cardList.queen.indexOf(String(num))) {\r\n                case 0: return '12:s';\r\n                case 1: return '12:h';\r\n                case 2: return '12:c';\r\n                case 3: return '12:d';\r\n                default: return 0;\r\n            }\r\n        } else if (this.state.cardList.king.indexOf(String(num)) !== -1) {\r\n            switch (this.state.cardList.king.indexOf(String(num))) {\r\n                case 0: return '13:s';\r\n                case 1: return '13:h';\r\n                case 2: return '13:c';\r\n                case 3: return '13:d';\r\n                default: return 0;\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    isRoundOver = (cards, cardsNum) => {\r\n        if (cards.length === 4) {\r\n            return true\r\n        } else if (cardsNum === 20) {\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n    showCard = (card) => {\r\n        if (this.state.selectedCard.indexOf(card) === -1) {\r\n            this.setState(state => {\r\n                const selectedCard = state.selectedCard.concat(card)\r\n                return {\r\n                    selectedCard,\r\n                };\r\n            })\r\n        } else {\r\n            var selectedCard = [...this.state.selectedCard]\r\n            const index = this.state.selectedCard.indexOf(card);\r\n            selectedCard.splice(index, 1)\r\n            this.setState({ selectedCard: selectedCard })\r\n        }\r\n        return 0;\r\n    }\r\n\r\n\r\n\r\n\r\n    generatePlayersData = () => {\r\n        const players = this.state.players\r\n        const p1 = this.state.player1\r\n        const p2 = this.state.player2\r\n        const p3 = this.state.player3\r\n        const p4 = this.state.player4\r\n        const p5 = this.state.player5\r\n        players.map(\r\n            (data, key) => {\r\n                if (key === 0) {\r\n                    if (p1.set === false) {\r\n                        const dataf = data.split('|')\r\n                        p1.pseudo = dataf[0]\r\n                        for (let i = 0; i < dataf[1]; i++) { p1.cards.push(0) }\r\n                        p1.set = true;\r\n                    }\r\n                } if (key === 1) {\r\n                    if (p2.set === false) {\r\n                        const dataf = data.split('|')\r\n                        p2.pseudo = dataf[0];\r\n                        for (let i = 0; i < dataf[1]; i++) { p2.cards.push(0) }\r\n                        p2.set = true;\r\n                    }\r\n                } if (key === 2) {\r\n                    if (p3.set === false) {\r\n                        const dataf = data.split('|')\r\n                        p3.pseudo = dataf[0];\r\n                        for (let i = 0; i < dataf[1]; i++) { p3.cards.push(0) }\r\n                        p3.set = true;\r\n                    }\r\n                } if (key === 3) {\r\n                    if (p4.set === false) {\r\n                        const dataf = data.split('|')\r\n                        p4.pseudo = dataf[0]\r\n                        for (let i = 0; i < dataf[1]; i++) { p4.cards.push(0) }\r\n                        p4.set = true;\r\n                    }\r\n                } if (key === 4) {\r\n                    if (p5.set === false) {\r\n                        const dataf = data.split('|')\r\n                        p5.pseudo = dataf[0]\r\n                        for (let i = 0; i < dataf[1]; i++) { p5.cards.push(0) }\r\n                        p5.set = true;\r\n                    }\r\n                }\r\n                return 0;\r\n            }\r\n        )\r\n        this.setState({ player1: p1, player2: p2, player3: p3, player4: p4, player5: p5 })\r\n\r\n    }\r\n\r\n\r\n    resetError = () => {\r\n        const error = { type: null, title: null, message: null, variant: null }\r\n        this.setState({ errorMessage: error })\r\n    }\r\n\r\n    pileTypeCard = () => {\r\n        const pile = this.state.pile\r\n        if (pile.length === 0) {\r\n            return -1\r\n        }\r\n        else {\r\n            const numPile = this.whatCardIs(pile[0]).split(':')\r\n            if (numPile[0] === 0) {\r\n                return 10\r\n            }\r\n            else {\r\n                return Number(numPile[0])\r\n            }\r\n        }\r\n    }\r\n    sameSelectedCard = () => {\r\n        var selCard = this.state.selectedCard\r\n        var len = selCard.length\r\n        var prev1 = this.whatCardIs(selCard[0]).split(':')\r\n        var prev = prev1[0]\r\n        if (len === 1) {\r\n            return Number(prev)\r\n        }\r\n        else {\r\n\r\n            for (let i = 0; i < len; i++) {\r\n                const actual = this.whatCardIs(selCard[i]).split(':')\r\n                if (prev !== actual[0]) {\r\n                    return -1\r\n                }\r\n                prev = actual[0]\r\n            }\r\n            return Number(prev)\r\n        }\r\n    }\r\n    canHeStart(){\r\n        if(this.state.countRound < 1)\r\n        {\r\n            const currUser = this.state.currentUser\r\n            if (this.state.playerCard.indexOf('25') !== -1) {\r\n                this.setState({ playerToken: 1 })\r\n                gameSocket.emit('startPlaying', { user: currUser })\r\n            } else {\r\n\r\n            }\r\n        }\r\n    }\r\n    canHePlay = () => {\r\n        if (this.state.playerToken === 1) {\r\n            const actualPile = this.state.pile\r\n            //const playerCard = this.state.playerCard\r\n            const selCard = this.state.selectedCard\r\n            const ssc = this.sameSelectedCard()\r\n            const ptc = this.pileTypeCard()\r\n            if (actualPile.length > selCard.length && ssc !== 20) {\r\n                const error = { type: 'rules', title: 'You cannot play this', message: 'You cannot play fewer cards than there are in the pile', variant: 'danger' }\r\n                this.setState({ errorMessage: error })\r\n\r\n            }\r\n            else if (ssc === -1 && ssc !== 20) {\r\n                const error = { type: 'rules', title: 'You cannot play this', message: 'You cannot play two cards of different value', variant: 'danger' }\r\n                this.setState({ errorMessage: error })\r\n            } else if (ssc < ptc && ssc !== 20) {\r\n                const error = { type: 'rules', title: 'You cannot play this', message: 'You cannot play one or more cards smaller than those in the pile', variant: 'danger' }\r\n                this.setState({ errorMessage: error })\r\n            }\r\n            else if (actualPile.length - 1 > selCard.length && ssc === 20) {\r\n                const error = { type: 'rules', title: 'You cannot play this', message: 'You need an extra 2 if you want to cut a series of 3 cards', variant: 'danger' }\r\n                this.setState({ errorMessage: error })\r\n            }\r\n            else {\r\n\r\n                const message = { type: 'finish', title: 'You just played', message: 'Wait for your turn.', variant: 'success' }\r\n\r\n\r\n                const user = this.state.currentUser\r\n                let counter = this.state.countTurn\r\n                counter++;\r\n                const copyTable = this.state.orderTurn.slice()\r\n                const nextUser= copyTable[counter]\r\n                this.setState({ errorMessage: message, playerToken: 0,countTurn: counter})\r\n                gameSocket.emit('finishTurn', nextUser)\r\n\r\n                this.delSelectedCard()\r\n                this.changePile(selCard, ssc)\r\n            }\r\n\r\n        }\r\n        else {\r\n            const error = { type: 'Not your turn', title: 'You cant play now', message: 'Its not your turn, wait for it.', variant: '' }\r\n            this.setState({ errorMessage: error })\r\n        }\r\n\r\n    }\r\n\r\n    changePile = (newCards, newCardsNum) => {\r\n\r\n        if (this.isRoundOver(newCards, newCardsNum) === false) {\r\n            const game_id= this.state.game_id\r\n            gameSocket.emit('chgpile', {newcds :newCards, gid : game_id})\r\n        }\r\n        else{\r\n            //switch socket.\r\n            const game_id= this.state.game_id\r\n            gameSocket.emit('chgpile', {newcds :newCards, gid : game_id})\r\n        }\r\n\r\n    }\r\n    playButton = () => {\r\n        return (\r\n            <div style={this.state.defStyle}>\r\n                <Button>Play selected cards</Button>\r\n            </div>\r\n        )\r\n    }\r\n    isThereErrorMessage = () => {\r\n        if (this.state.errorMessage.type === 'rules') {\r\n            return (\r\n                <Row style={this.state.defStyle}>\r\n                    <Alert variant={this.state.errorMessage.variant}>\r\n                        <Alert.Heading>{this.state.errorMessage.title}</Alert.Heading>\r\n                        {this.state.errorMessage.message}\r\n                        <br />Check the rules for more informations\r\n                    </Alert>\r\n                </Row>\r\n            )\r\n        } else if (this.state.errorMessage.type === 'finish') {\r\n            return (\r\n                <Row style={this.state.defStyle}>\r\n                    <Alert variant={this.state.errorMessage.variant} onClose={() => this.resetError()} dismissible>\r\n                        <Alert.Heading>{this.state.errorMessage.title}</Alert.Heading>\r\n                        {this.state.errorMessage.message}\r\n                    </Alert>\r\n                </Row>\r\n            )\r\n        } else if(this.state.errorMessage.type ==='token'){\r\n            return (\r\n                <Row style={this.state.defStyle}>\r\n                    <Alert variant={this.state.errorMessage.variant} onClose={() => this.resetError()} dismissible>\r\n                        <Alert.Heading>{this.state.errorMessage.title}</Alert.Heading>\r\n                        {this.state.errorMessage.message}\r\n                    </Alert>\r\n                </Row>\r\n            )\r\n        }\r\n\r\n    }\r\n    isThere4Players = () => {\r\n        if (this.state.player4.pseudo !== null) {\r\n            return (\r\n                <div>\r\n                    <Row style={this.state.defStyle}>\r\n                        {\r\n                            this.state.player4.cards.map((value, key) => {\r\n                                return <Carte num={value} index={key} identity='othercards' />\r\n                            })}\r\n                    </Row>\r\n                    <br />\r\n                    <Row style={this.state.defStyle}>\r\n                        {this.state.player4.pseudo !== null ? <span style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>{this.state.player4.pseudo}</span> : <span></span>}\r\n                    </Row>\r\n                </div>\r\n            )\r\n        } else {\r\n            return (\r\n                <div>\r\n                    <span></span>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    isThere5Players = () => {\r\n        if (this.state.player5.pseudo !== null) {\r\n            return (\r\n                <div>\r\n                    <Row style={this.state.defStyle}>\r\n                        {\r\n                            this.state.player5.cards.map((value, key) => {\r\n                                return <Carte num={value} index={key} identity='othercards' />\r\n                            })}\r\n                    </Row>\r\n                    <br />\r\n                    <Row style={this.state.defStyle}>\r\n                        {this.state.player5.pseudo !== null ? <span style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>{this.state.player5.pseudo}</span> : <span></span>}\r\n                    </Row>\r\n                </div>\r\n            )\r\n        } else {\r\n            return (\r\n                <div>\r\n                    <span></span>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        const currUser = this.state.currentUser;\r\n        const gameId = this.state.gameId\r\n        gameSocket.on('connection', function (data) {\r\n\r\n        })\r\n        // Requete backend pour savoir les cartes de l'utilisateur local\r\n        gameSocket.emit('join_game', {gid: this.state.game_id, user: this.state.currentUser})\r\n        gameSocket.on('userCard',(sdata) => {\r\n            const json = sdata\r\n            json.forEach(({ user, card }) => {\r\n                this.setState(state => {\r\n                    const playerCard = state.playerCard.concat(card)\r\n                    return {\r\n                        playerCard,\r\n                    };\r\n                }, this.canHeStart)\r\n            })\r\n        })\r\n        // Requete backend pour avoir le nombre de carte des joueurs\r\n        gameSocket.on('othersCount',(sdata) =>{\r\n            const json = sdata\r\n            this.setState({ playersData: json })\r\n                json.forEach(({ user, Ncards }) => {\r\n                    const passerelle = user + '|' + Ncards\r\n                    this.setState(state => {\r\n                        const players = state.players.concat(passerelle)\r\n                        return {\r\n                            players,\r\n                        };\r\n                }, this.generatePlayersData)\r\n            })\r\n        })\r\n\r\n        gameSocket.on('cardsPot', (sdata) => {\r\n            const json = sdata\r\n            json.forEach(({ user, card }) => {\r\n                this.setState(state => {\r\n                    const pile = state.pile.concat(card)\r\n                    return {\r\n                        pile,\r\n                    };\r\n                })\r\n            })\r\n        })\r\n\r\n        gameSocket.on('newpile', (sdata) =>{\r\n            const newpile = sdata\r\n            this.setState({ pile: newpile })\r\n        })\r\n\r\n        gameSocket.on('playerdeconnexion', (sdata) =>{\r\n            const player = sdata.user;\r\n        })\r\n        gameSocket.on('userPlayed', (sdata)=>{\r\n            let counter = this.state.countTurn\r\n            counter++;\r\n            if(sdata===currUser){\r\n                const msg={ type: 'turn', title: 'La partie a commencé', message: `C'est a toi de jouer chef`, variant: 'success' }\r\n                this.setState({playerToken: 1, errorMessage : msg})\r\n            }\r\n            this.setState({countTurn: counter})\r\n        })\r\n        gameSocket.on('gameStarted', (sdata)=>{\r\n            const msg = { type: 'start', title: 'La partie a commencé', message: `${sdata} dispose de la dame de coeur, il commence la partie`, variant: 'info' }\r\n            this.setState({errorMessage: msg})\r\n        })\r\n        const playerCard=this.state.playerCard\r\n\r\n\r\n    }\r\n\r\n    delSelectedCard = () => {\r\n        const selCard = this.state.selectedCard\r\n        var userCard = this.state.playerCard\r\n        gameSocket.emit('delcard',{gid: this.state.game_id, us:this.state.currentUser, sc : this.state.selectedCard, usc : this.state.playerCard})\r\n        gameSocket.on('delcardReturn', (sdata)=>{\r\n            const userCard = sdata;\r\n            this.setState({ playerCard: userCard, selectedCard: [] })\r\n        })\r\n    }\r\n    closeAlert = () => {\r\n        this.setState({ showAlert: false })\r\n    }\r\n\r\n    componentDidUpdate() {\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div style={{\r\n                border: '1px solid black',\r\n                backgroundColor: '#5DAB51',\r\n\r\n            }}>\r\n                <Container fluid>\r\n                    <Row>\r\n                        <Col>\r\n                            {/* Rien */}\r\n                        </Col>\r\n                        <Col>\r\n                            <Container fluid >\r\n                                <Row style={this.state.defStyle}>\r\n                                    {\r\n                                        this.state.player1.cards.map((value, key) => {\r\n                                            return <Carte num={value} index={key} identity='othercards' />\r\n                                        })}\r\n                                </Row>\r\n                                <br />\r\n                                <Row style={this.state.defStyle}>\r\n                                    {this.state.player1.pseudo !== null ? <span style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>{this.state.player1.pseudo}</span> : <span></span>}\r\n                                </Row>\r\n                            </Container>\r\n                        </Col>\r\n                        <Col>\r\n                            {/* Rien */}\r\n                        </Col>\r\n                    </Row>\r\n                    <br />\r\n                    <br />\r\n                    <Row>\r\n                        <Col>\r\n                            <Row style={this.state.defStyle}>\r\n                                {\r\n                                    this.state.player2.cards.map((value, key) => {\r\n                                        return <Carte num={value} index={key} identity='othercards' />\r\n                                    })}\r\n                            </Row>\r\n                            <br />\r\n                            <Row style={this.state.defStyle}>\r\n                                {this.state.player2.pseudo !== null ? <span style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>{this.state.player2.pseudo}</span> : <span></span>}\r\n                            </Row>\r\n\r\n                        </Col>\r\n                        <Col style={{ border: '2px solid red', borderRadius: '10px', }}>\r\n                            <Row style={this.state.defStyle}>\r\n                                {this.state.switcher === true ? <span id={String(this.state.switcher)}>Pile</span> : <span id={String(this.state.switcher)}>Pile</span>}\r\n                            </Row>\r\n                            <Row style={this.state.defStyle}>\r\n                                {\r\n                                    this.state.pile === [] ? <span>VIDE</span> : this.state.pile.map((value, key) => {\r\n                                        return <Carte num={value} index={key} identity='cards' />\r\n                                    })\r\n                                }\r\n                            </Row>\r\n                            <br />\r\n                            <Row>\r\n\r\n                            </Row>\r\n                        </Col>\r\n                        <Col>\r\n                            <Row style={this.state.defStyle}>\r\n                                {\r\n                                    this.state.player3.cards.map((value, key) => {\r\n                                        return <Carte num={value} index={key} identity='othercards' />\r\n                                    })}\r\n                            </Row>\r\n                            <br />\r\n                            <Row style={this.state.defStyle}>\r\n                                {this.state.player3.pseudo !== null ? <span style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>{this.state.player3.pseudo}</span> : <span></span>}\r\n                            </Row>\r\n                        </Col>\r\n                    </Row>\r\n                    <br />\r\n                    <br />\r\n                    <Row>\r\n                        <Col>\r\n                            {this.isThere4Players()}\r\n                        </Col>\r\n                        <Col>\r\n                            {this.isThereErrorMessage()}\r\n                        </Col>\r\n                        <Col>\r\n                            {this.isThere5Players()}\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n                <br />\r\n                <br />\r\n                <Container fluid>\r\n                    <Row>\r\n                        {this.state.playerToken ===1 ? <Col style={this.state.defStyle}><Button variant='secondary' block disable>pass</Button></Col> : <Col style={this.state.defStyle}><Button block >pass</Button></Col>}\r\n                        <Col style={this.state.defStyle}>\r\n                            {\r\n                                this.state.playerCard.map((value, index) => {\r\n                                    if (this.state.selectedCard.indexOf(value) !== -1) {\r\n                                        return <Carte num={value} index={index} identity='usercards' action={this.showCard} style={this.state.cardStyle} />;\r\n                                    } else {\r\n                                        return <Carte num={value} index={index} identity='usercards' action={this.showCard} />;\r\n                                    }\r\n                                })\r\n                            }\r\n                        </Col>\r\n                        {this.state.selectedCard.length > 0 ? this.state.playerToken === 1 ? <Col style={this.state.defStyle}><Button onClick={() => this.canHePlay()} block>Play selected cards</Button></Col> :<Col style={this.state.defStyle}><Button variant=\"secondary\" block disabled>Play selected cards</Button></Col> : <Col style={this.state.defStyle}><Button variant=\"secondary\" block disabled>Play selected cards</Button></Col>}\r\n\r\n                    </Row>\r\n                </Container>\r\n                <br />\r\n                <br />\r\n                <br />\r\n\r\n                <div></div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Game;\r\n\r\n\r\n\r\n\r\n/*{\r\n            ace :   '1:14:27:40' ,\r\n            two:    '2:15:28:41',\r\n            three:  '3:16:29:42',\r\n            four:   '4:17:30:43',\r\n            five:   '5:18:31:44',\r\n            six:    '6:19:32:45',\r\n            seven:  '7:20:33:46',\r\n            eight:  '8:21:34:47',\r\n            nine:   '9:22:35:48',\r\n            ten:    '10:23:36:49',\r\n            jack:   '11:24:37:50',\r\n            queen:  '12:25:38:51',\r\n            king:   '13:26:39:52',\r\n\r\n            } */\r\n","C:\\Users\\Dany\\Documents\\hosting\\projet\\client\\src\\pages\\Profil\\Profil.js",[],"C:\\Users\\Dany\\Documents\\hosting\\projet\\client\\src\\components\\NavigationAutres.js",[],"C:\\Users\\Dany\\Documents\\hosting\\projet\\client\\src\\components\\NavigationHisto.js",[],"C:\\Users\\Dany\\Documents\\hosting\\projet\\client\\src\\components\\Carte.js",[],"C:\\Users\\Dany\\Documents\\hosting\\projet\\client\\src\\components\\NavigationProfil.js",[],"C:\\Users\\Dany\\Documents\\hosting\\projet\\client\\src\\pages\\Home\\Home.js",["87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107","108"],"C:\\Users\\Dany\\Documents\\hosting\\projet\\client\\src\\pages\\Home\\components\\Lobby.js",["109","110","111","112"],"import React, { Component } from 'react';\r\nimport { Button, Row, Col, Container, Badge } from 'react-bootstrap'\r\n\r\nclass Lobby extends Component{\r\n    render(){\r\n        return(\r\n        <Container fluid>\r\n            {this.props.userLobby.map((data, key)=>{\r\n                const user =' : '+ String(data.user);\r\n                \r\n                if(data.token === 1){\r\n                    return <Row key={key}><span style={{display: 'flex', justifyContent: 'center', alignItems: 'center', border:'2px solid #FF3535',borderRadius: '10px',color: '#FF3535' }}>| Owner |</span ><p style={{display: 'flex', justifyContent: 'center', alignItems: 'center', verticalAlign:'center'}}>{user}</p><br/></Row>\r\n                } \r\n                if(data.token ===0){\r\n                    return <Row key={key}><span style={{display: 'flex', justifyContent: 'center', alignItems: 'center', border:'2px solid #4185FA',borderRadius: '10px',color: '#4185FA' }}>| User |</span ><p style={{display: 'flex', justifyContent: 'center', alignItems: 'center', verticalAlign:'center'}} >{user}</p><br/></Row>;\r\n                }\r\n            })}\r\n        </Container>\r\n    )\r\n    }\r\n}\r\nexport default Lobby;","C:\\Users\\Dany\\Documents\\hosting\\projet\\client\\src\\pages\\Home\\components\\Pool.js",["113","114"],"import React, { Component } from 'react';\r\nimport { Button, Row, Col, Container, Badge } from 'react-bootstrap'\r\n\r\n\r\nclass Pool extends Component {\r\n    render() {\r\n        return(\r\n            <Container fluid>\r\n                {this.props.pool.map((data, key)=>{\r\n                    if (data.currPlayers >= data.maxPlayers){\r\n                        return <Row key={key}><Button variant=\"danger\">Full [{data.currPlayers}/{data.maxPlayers}]</Button><p>{data.gameId}</p></Row>\r\n                    }\r\n                    else {\r\n                        return <Row key={key}><Button variant=\"success\" onClick={() => this.props.actionJoin(data.gameId)}>Join [{data.currPlayers}/{data.maxPlayers}]</Button><p>{data.gameId}</p></Row>\r\n                    }\r\n                })}\r\n            </Container>\r\n        )\r\n    }\r\n}\r\nexport default Pool;\r\n\r\n\r\n\r\n",{"ruleId":"115","severity":1,"message":"116","line":8,"column":8,"nodeType":"117","messageId":"118","endLine":8,"endColumn":13},{"ruleId":"119","severity":1,"message":"120","line":45,"column":17,"nodeType":"121","messageId":"122","endLine":45,"endColumn":27},{"ruleId":"115","severity":1,"message":"123","line":371,"column":23,"nodeType":"117","messageId":"118","endLine":371,"endColumn":27},{"ruleId":"115","severity":1,"message":"124","line":494,"column":15,"nodeType":"117","messageId":"118","endLine":494,"endColumn":21},{"ruleId":"115","severity":1,"message":"125","line":544,"column":19,"nodeType":"117","messageId":"118","endLine":544,"endColumn":25},{"ruleId":"115","severity":1,"message":"126","line":559,"column":15,"nodeType":"117","messageId":"118","endLine":559,"endColumn":25},{"ruleId":"115","severity":1,"message":"127","line":565,"column":15,"nodeType":"117","messageId":"118","endLine":565,"endColumn":22},{"ruleId":"115","severity":1,"message":"128","line":566,"column":13,"nodeType":"117","messageId":"118","endLine":566,"endColumn":21},{"ruleId":"115","severity":1,"message":"129","line":4,"column":10,"nodeType":"117","messageId":"118","endLine":4,"endColumn":14},{"ruleId":"115","severity":1,"message":"130","line":9,"column":14,"nodeType":"117","messageId":"118","endLine":9,"endColumn":20},{"ruleId":"131","severity":1,"message":"132","line":265,"column":36,"nodeType":"133","messageId":"134","endLine":265,"endColumn":38},{"ruleId":"131","severity":1,"message":"132","line":279,"column":44,"nodeType":"133","messageId":"134","endLine":279,"endColumn":46},{"ruleId":"131","severity":1,"message":"132","line":291,"column":44,"nodeType":"133","messageId":"134","endLine":291,"endColumn":46},{"ruleId":"131","severity":1,"message":"132","line":305,"column":44,"nodeType":"133","messageId":"134","endLine":305,"endColumn":46},{"ruleId":"131","severity":1,"message":"132","line":322,"column":44,"nodeType":"133","messageId":"134","endLine":322,"endColumn":46},{"ruleId":"131","severity":1,"message":"132","line":340,"column":44,"nodeType":"133","messageId":"134","endLine":340,"endColumn":46},{"ruleId":"115","severity":1,"message":"135","line":420,"column":15,"nodeType":"117","messageId":"118","endLine":420,"endColumn":21},{"ruleId":"131","severity":1,"message":"132","line":467,"column":40,"nodeType":"133","messageId":"134","endLine":467,"endColumn":42},{"ruleId":"131","severity":1,"message":"132","line":477,"column":47,"nodeType":"133","messageId":"134","endLine":477,"endColumn":49},{"ruleId":"131","severity":1,"message":"132","line":484,"column":48,"nodeType":"133","messageId":"134","endLine":484,"endColumn":50},{"ruleId":"131","severity":1,"message":"132","line":496,"column":48,"nodeType":"133","messageId":"134","endLine":496,"endColumn":50},{"ruleId":"131","severity":1,"message":"132","line":510,"column":48,"nodeType":"133","messageId":"134","endLine":510,"endColumn":50},{"ruleId":"131","severity":1,"message":"132","line":527,"column":48,"nodeType":"133","messageId":"134","endLine":527,"endColumn":50},{"ruleId":"131","severity":1,"message":"132","line":545,"column":48,"nodeType":"133","messageId":"134","endLine":545,"endColumn":50},{"ruleId":"136","severity":1,"message":"137","line":584,"column":65,"nodeType":"138","endLine":584,"endColumn":68},{"ruleId":"139","severity":1,"message":"140","line":584,"column":65,"nodeType":"138","endLine":584,"endColumn":68},{"ruleId":"136","severity":1,"message":"137","line":627,"column":65,"nodeType":"138","endLine":627,"endColumn":68},{"ruleId":"139","severity":1,"message":"140","line":627,"column":65,"nodeType":"138","endLine":627,"endColumn":68},{"ruleId":"136","severity":1,"message":"137","line":670,"column":65,"nodeType":"138","endLine":670,"endColumn":68},{"ruleId":"139","severity":1,"message":"140","line":670,"column":65,"nodeType":"138","endLine":670,"endColumn":68},{"ruleId":"115","severity":1,"message":"141","line":2,"column":10,"nodeType":"117","messageId":"118","endLine":2,"endColumn":16},{"ruleId":"115","severity":1,"message":"142","line":2,"column":23,"nodeType":"117","messageId":"118","endLine":2,"endColumn":26},{"ruleId":"115","severity":1,"message":"143","line":2,"column":39,"nodeType":"117","messageId":"118","endLine":2,"endColumn":44},{"ruleId":"131","severity":1,"message":"144","line":8,"column":50,"nodeType":"133","messageId":"145","endLine":8,"endColumn":52},{"ruleId":"115","severity":1,"message":"142","line":2,"column":23,"nodeType":"117","messageId":"118","endLine":2,"endColumn":26},{"ruleId":"115","severity":1,"message":"143","line":2,"column":39,"nodeType":"117","messageId":"118","endLine":2,"endColumn":44},"no-unused-vars","'Popup' is defined but never used.","Identifier","unusedVar","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","noDirectMutation","'user' is assigned a value but never used.","'gameId' is assigned a value but never used.","'player' is assigned a value but never used.","'playerCard' is assigned a value but never used.","'selCard' is assigned a value but never used.","'userCard' is assigned a value but never used.","'Link' is defined but never used.","'Socket' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'pseudo' is assigned a value but never used.","jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'Button' is defined but never used.","'Col' is defined but never used.","'Badge' is defined but never used.","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd"]