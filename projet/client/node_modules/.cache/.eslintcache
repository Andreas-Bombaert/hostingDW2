[{"C:\\Users\\abomb\\Documents\\ProjetDW_aout\\hosting\\projet\\client\\src\\index.js":"1","C:\\Users\\abomb\\Documents\\ProjetDW_aout\\hosting\\projet\\client\\src\\App.js":"2","C:\\Users\\abomb\\Documents\\ProjetDW_aout\\hosting\\projet\\client\\src\\components\\Navigation.js":"3","C:\\Users\\abomb\\Documents\\ProjetDW_aout\\hosting\\projet\\client\\src\\pages\\Jeu\\Jeu.js":"4","C:\\Users\\abomb\\Documents\\ProjetDW_aout\\hosting\\projet\\client\\src\\pages\\Login\\Login.js":"5","C:\\Users\\abomb\\Documents\\ProjetDW_aout\\hosting\\projet\\client\\src\\pages\\Rules\\Rules.js":"6","C:\\Users\\abomb\\Documents\\ProjetDW_aout\\hosting\\projet\\client\\src\\pages\\Profil\\Profil.js":"7","C:\\Users\\abomb\\Documents\\ProjetDW_aout\\hosting\\projet\\client\\src\\pages\\Profil\\Historique.js":"8","C:\\Users\\abomb\\Documents\\ProjetDW_aout\\hosting\\projet\\client\\src\\pages\\Howto\\Howto.js":"9","C:\\Users\\abomb\\Documents\\ProjetDW_aout\\hosting\\projet\\client\\src\\pages\\Signin\\Signin.js":"10","C:\\Users\\abomb\\Documents\\ProjetDW_aout\\hosting\\projet\\client\\src\\pages\\Game\\Game.js":"11","C:\\Users\\abomb\\Documents\\ProjetDW_aout\\hosting\\projet\\client\\src\\components\\Carte.js":"12","C:\\Users\\abomb\\Documents\\ProjetDW_aout\\hosting\\projet\\client\\src\\components\\NavigationHisto.js":"13","C:\\Users\\abomb\\Documents\\ProjetDW_aout\\hosting\\projet\\client\\src\\components\\NavigationAutres.js":"14","C:\\Users\\abomb\\Documents\\ProjetDW_aout\\hosting\\projet\\client\\src\\components\\NavigationProfil.js":"15","C:\\Users\\abomb\\Documents\\ProjetDW_aout\\hosting\\projet\\client\\src\\pages\\Home\\Home.js":"16","C:\\Users\\abomb\\Documents\\ProjetDW_aout\\hosting\\projet\\client\\src\\pages\\Home\\components\\Pool.js":"17","C:\\Users\\abomb\\Documents\\ProjetDW_aout\\hosting\\projet\\client\\src\\pages\\Home\\components\\Lobby.js":"18"},{"size":728,"mtime":1627134732267,"results":"19","hashOfConfig":"20"},{"size":1805,"mtime":1627134732263,"results":"21","hashOfConfig":"20"},{"size":18937,"mtime":1629636285076,"results":"22","hashOfConfig":"20"},{"size":296,"mtime":1627134732272,"results":"23","hashOfConfig":"20"},{"size":4524,"mtime":1629636285076,"results":"24","hashOfConfig":"20"},{"size":7129,"mtime":1627134732275,"results":"25","hashOfConfig":"20"},{"size":3897,"mtime":1629636198950,"results":"26","hashOfConfig":"20"},{"size":1977,"mtime":1629636198950,"results":"27","hashOfConfig":"20"},{"size":3638,"mtime":1627134732271,"results":"28","hashOfConfig":"20"},{"size":8509,"mtime":1629636285076,"results":"29","hashOfConfig":"20"},{"size":28738,"mtime":1627134732268,"results":"30","hashOfConfig":"20"},{"size":806,"mtime":1627134732263,"results":"31","hashOfConfig":"20"},{"size":2370,"mtime":1627134732266,"results":"32","hashOfConfig":"20"},{"size":1106,"mtime":1627134732265,"results":"33","hashOfConfig":"20"},{"size":2378,"mtime":1627134732266,"results":"34","hashOfConfig":"20"},{"size":27731,"mtime":1629636198951,"results":"35","hashOfConfig":"20"},{"size":853,"mtime":1627134732270,"results":"36","hashOfConfig":"20"},{"size":1187,"mtime":1627134732270,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1qenmaf",{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78"},"C:\\Users\\abomb\\Documents\\ProjetDW_aout\\hosting\\projet\\client\\src\\index.js",[],"C:\\Users\\abomb\\Documents\\ProjetDW_aout\\hosting\\projet\\client\\src\\App.js",[],"C:\\Users\\abomb\\Documents\\ProjetDW_aout\\hosting\\projet\\client\\src\\components\\Navigation.js",[],"C:\\Users\\abomb\\Documents\\ProjetDW_aout\\hosting\\projet\\client\\src\\pages\\Jeu\\Jeu.js",[],"C:\\Users\\abomb\\Documents\\ProjetDW_aout\\hosting\\projet\\client\\src\\pages\\Login\\Login.js",["79"],"import React from \"react\";\r\nimport NavigationAutres from \"../../components/NavigationAutres\";\r\nimport Col from 'react-bootstrap/Col'\r\nimport Row from 'react-bootstrap/Row'\r\nimport Container from 'react-bootstrap/Container'\r\n\r\nclass Signin extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n       \r\n        this.state={\r\n            email:'',\r\n            password:'',\r\n            bdd:'',\r\n            emailsPassbdd:'',\r\n            connected:false,\r\n            passwordtest:'',\r\n            \r\n   \r\n        }\r\n        \r\n\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n      }\r\n\r\n      \r\n\r\n      \r\n\r\n      handleSubmit(event) {\r\n        event.preventDefault();\r\n        \r\n\r\n\r\n        \r\n       \r\n\r\n        for (let i=0; i<this.state.bdd.length;i++){\r\n            if (this.state.email !== this.state.bdd[i].Email){\r\n            }\r\n            else{\r\n                //alert(\"Mail in bdd\")\r\n                this.state.passwordtest = this.state.bdd[i].Password\r\n                /*let pass=this.state.password\r\n                var bcrypt = require('bcryptjs');\r\n                bcrypt.genSalt(10,function(err,salt){\r\n                    bcrypt.hash(pass, salt, function(err, hash){\r\n                    })\r\n                })*/\r\n                \r\n                var bcrypt = require('bcryptjs');\r\n                bcrypt.compare( this.state.password,this.state.bdd[i].Password, function(err,res){\r\n                    if(res){\r\n                        \r\n                        localStorage.setItem('Connect', true)\r\n                        window.location.href= \"localhost:3000/\"\r\n                        //window.location.href= \"http://localhost:3000/\"\r\n                        }\r\n                       \r\n                })\r\n                \r\n                localStorage.setItem('Email', this.state.email)\r\n                localStorage.setItem('Pseudo', this.state.bdd[i].Pseudo)\r\n                localStorage.getItem('Connect')\r\n                /*\r\n                localStorage.setItem('Connect', true)\r\n                localStorage.setItem('Email', this.state.email)\r\n                localStorage.setItem('Pseudo', this.state.bdd[i].Pseudo)\r\n                localStorage.getItem('Connect')\r\n                window.location.href= \"http://localhost:3000/\" */\r\n            }\r\n        }\r\n      }\r\n\r\n      componentDidMount(){\r\n        localStorage.setItem('Connect',false)\r\n          fetch('http://135.125.101.210:5000/loginall')\r\n          .then(response => response.json())\r\n          .then(json => {\r\n            \r\n            this.setState({bdd: json})\r\n            \r\n          })\r\n      }\r\n\r\n     \r\n\r\n    render() {\r\n        return (\r\n            <html>\r\n                <Row>  \r\n                    <Col>\r\n                        <div class=\"hautpage\">\r\n                            <NavigationAutres />\r\n                        </div> \r\n                    </Col> \r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <form onSubmit={this.handleSubmit}>\r\n                            <Container>\r\n                                <Col className=\"mt-5\">\r\n                                    <label style={{textAlign: \"center\", fontSize: 30, color:'white',marginTop:'10%',marginLeft:'33%',marginRight:'67%'}}>\r\n                                        Email :\r\n                                        <input type=\"text\" value={this.state.email} onChange={text => this.setState({email: text.target.value})} />\r\n                                    </label>\r\n                                </Col>\r\n                                <Col className=\"mt-5\">\r\n                                    <label style={{textAlign: \"center\", fontSize: 30, color:'white',marginTop:'4%',marginLeft:'33%',marginRight:'67%'}}>\r\n                                        Password :\r\n                                        <input type=\"password\" value={this.state.password} onChange={text => this.setState({password: text.target.value})} />\r\n                                    </label>\r\n                                    <br></br><br></br><br></br>\r\n                                    <input style={{textAlign: \"center\", fontSize: 45, color:'red',marginTop:'5%', marginLeft:'39%'}} type=\"submit\" value=\"Connexion\" />\r\n                                </Col>\r\n                            </Container>\r\n                        </form>  \r\n                    </Col>\r\n                </Row>     \r\n            </html>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Signin\r\n","C:\\Users\\abomb\\Documents\\ProjetDW_aout\\hosting\\projet\\client\\src\\pages\\Rules\\Rules.js",[],"C:\\Users\\abomb\\Documents\\ProjetDW_aout\\hosting\\projet\\client\\src\\pages\\Profil\\Profil.js",[],"C:\\Users\\abomb\\Documents\\ProjetDW_aout\\hosting\\projet\\client\\src\\pages\\Profil\\Historique.js",[],"C:\\Users\\abomb\\Documents\\ProjetDW_aout\\hosting\\projet\\client\\src\\pages\\Howto\\Howto.js",[],"C:\\Users\\abomb\\Documents\\ProjetDW_aout\\hosting\\projet\\client\\src\\pages\\Signin\\Signin.js",[],"C:\\Users\\abomb\\Documents\\ProjetDW_aout\\hosting\\projet\\client\\src\\pages\\Game\\Game.js",["80","81","82","83","84","85"],"import React, { Component } from \"react\";\r\nimport { Button, Row, Col, Container, Alert } from 'react-bootstrap';\r\nimport Carte from '../../components/Carte'\r\nimport io from \"socket.io-client\";\r\n\r\n/* TODO :   connexion a la game\r\n            token\r\n\r\n            Reconnection si deco\r\n            fin de round\r\n            fin de game\r\n            envoi stats\r\n            page de fin \r\n\r\n*/\r\nlet gameSocket\r\n\r\nclass Game extends Component {\r\n\r\n    constructor() {\r\n        super();\r\n\r\n        /*********** Global Variables ***********/\r\n\r\n        this.state = {\r\n            /* Usefull variables*/\r\n            playerToken: 0,\r\n            selectedCard: [],\r\n            switcher: false,\r\n            errorMessage: { type: null, title: null, message: null, variant: null },\r\n            game_id : localStorage.getItem('gameId'),\r\n            currentUser: localStorage.getItem('pseudo'),\r\n            orderTurn: localStorage.getItem('turn').split(','),\r\n            countTurn: 0,\r\n            countRound: 0,\r\n\r\n            /* Test variable */\r\n            testChgPile: [5, 18],\r\n            testChgPile2: [13],\r\n\r\n            /* socket io */\r\n            connectionConfig: {\r\n                \"force new connection\": true,\r\n                \"reconnectionAttemps\": \"Infinity\",\r\n                \"timeout\": 10000,\r\n                \"transports\": [\"websocket\"]\r\n            },\r\n            endpoint: 'localhost:5002',\r\n\r\n            /* RAW DATA */\r\n            playersData: null,\r\n            data: null,\r\n\r\n            /* PLAYERS */\r\n            players: [],\r\n            player1: { pseudo: null, cards: [], set: false, connected : false },\r\n            player2: { pseudo: null, cards: [], set: false, connected : false },\r\n            player3: { pseudo: null, cards: [], set: false, connected : false },\r\n            player4: { pseudo: null, cards: [], set: false, connected : false },\r\n            player5: { pseudo: null, cards: [], set: false, connected : false },\r\n\r\n            /* STYLE */\r\n            defStyle: { display: 'flex', justifyContent: 'center', alignItems: 'center' },\r\n            cardStyle: { border: '2px solid red', borderRadius: '10px', },\r\n\r\n            /* VISIBLE CARDS */\r\n            pile: [],\r\n            playerCard: [],\r\n\r\n            /* List of all card, refers to their .png */\r\n            cardList: {\r\n                ace: ['1', '14', '27', '40'],\r\n                two: ['2', '15', '28', '41'],\r\n                three: ['3', '16', '29', '42'],\r\n                four: ['4', '17', '30', '43'],\r\n                five: ['5', '18', '31', '44'],\r\n                six: ['6', '19', '32', '45'],\r\n                seven: ['7', '20', '33', '46'],\r\n                eight: ['8', '21', '34', '47'],\r\n                nine: ['9', '22', '35', '48'],\r\n                ten: ['10', '23', '36', '49'],\r\n                jack: ['11', '24', '37', '50'],\r\n                queen: ['12', '25', '38', '51'],\r\n                king: ['13', '26', '39', '52'],\r\n\r\n            }\r\n\r\n        }\r\n        gameSocket = io(this.state.endpoint, this.state.connectionConfig)\r\n        \r\n    }\r\n\r\n    /********************** Game Function **********************/\r\n\r\n    /***********  ***********/\r\n\r\n    whatCardIs = (num) => {\r\n        // RETURN -1 IF NOT\r\n        if (this.state.cardList.ace.indexOf(String(num)) !== -1) {\r\n            switch (this.state.cardList.ace.indexOf(String(num))) {\r\n                case 0: return '15:s';\r\n                case 1: return '15:h';\r\n                case 2: return '15:c';\r\n                case 3: return '15:d';\r\n                default: return 0;\r\n            }\r\n        } else if (this.state.cardList.two.indexOf(String(num)) !== -1) {\r\n            switch (this.state.cardList.two.indexOf(String(num))) {\r\n                case 0: return '20:s';\r\n                case 1: return '20:h';\r\n                case 2: return '20:c';\r\n                case 3: return '20:d';\r\n                default: return 0;\r\n            }\r\n        } else if (this.state.cardList.three.indexOf(String(num)) !== -1) {\r\n            switch (this.state.cardList.three.indexOf(String(num))) {\r\n                case 0: return '3:s';\r\n                case 1: return '3:h';\r\n                case 2: return '3:c';\r\n                case 3: return '3:d';\r\n                default: return 0;\r\n            }\r\n        } else if (this.state.cardList.four.indexOf(String(num)) !== -1) {\r\n            switch (this.state.cardList.four.indexOf(String(num))) {\r\n                case 0: return '4:s';\r\n                case 1: return '4:h';\r\n                case 2: return '4:c';\r\n                case 3: return '4:d';\r\n                default: return 0;\r\n            }\r\n        } else if (this.state.cardList.five.indexOf(String(num)) !== -1) {\r\n            switch (this.state.cardList.five.indexOf(String(num))) {\r\n                case 0: return '5:s';\r\n                case 1: return '5:h';\r\n                case 2: return '5:c';\r\n                case 3: return '5:d';\r\n                default: return 0;\r\n            }\r\n        } else if (this.state.cardList.six.indexOf(String(num)) !== -1) {\r\n            switch (this.state.cardList.six.indexOf(String(num))) {\r\n                case 0: return '6:s';\r\n                case 1: return '6:h';\r\n                case 2: return '6:c';\r\n                case 3: return '6:d';\r\n                default: return 0;\r\n            }\r\n        } else if (this.state.cardList.seven.indexOf(String(num)) !== -1) {\r\n            switch (this.state.cardList.seven.indexOf(String(num))) {\r\n                case 0: return '7:s';\r\n                case 1: return '7:h';\r\n                case 2: return '7:c';\r\n                case 3: return '7:d';\r\n                default: return 0;\r\n            }\r\n        } else if (this.state.cardList.eight.indexOf(String(num)) !== -1) {\r\n            switch (this.state.cardList.eight.indexOf(String(num))) {\r\n                case 0: return '8:s';\r\n                case 1: return '8:h';\r\n                case 2: return '8:c';\r\n                case 3: return '8:d';\r\n                default: return 0;\r\n            }\r\n        } else if (this.state.cardList.nine.indexOf(String(num)) !== -1) {\r\n            switch (this.state.cardList.nine.indexOf(String(num))) {\r\n                case 0: return '9:s';\r\n                case 1: return '9:h';\r\n                case 2: return '9:c';\r\n                case 3: return '9:d';\r\n                default: return 0;\r\n            }\r\n        } else if (this.state.cardList.ten.indexOf(String(num)) !== -1) {\r\n            switch (this.state.cardList.ten.indexOf(String(num))) {\r\n                case 0: return '10:s';\r\n                case 1: return '10:h';\r\n                case 2: return '10:c';\r\n                case 3: return '10:d';\r\n                default: return 0;\r\n            }\r\n        } else if (this.state.cardList.jack.indexOf(String(num)) !== -1) {\r\n            switch (this.state.cardList.jack.indexOf(String(num))) {\r\n                case 0: return '11:s';\r\n                case 1: return '11:h';\r\n                case 2: return '11:c';\r\n                case 3: return '11:d';\r\n                default: return 0;\r\n            }\r\n        } else if (this.state.cardList.queen.indexOf(String(num)) !== -1) {\r\n            switch (this.state.cardList.queen.indexOf(String(num))) {\r\n                case 0: return '12:s';\r\n                case 1: return '12:h';\r\n                case 2: return '12:c';\r\n                case 3: return '12:d';\r\n                default: return 0;\r\n            }\r\n        } else if (this.state.cardList.king.indexOf(String(num)) !== -1) {\r\n            switch (this.state.cardList.king.indexOf(String(num))) {\r\n                case 0: return '13:s';\r\n                case 1: return '13:h';\r\n                case 2: return '13:c';\r\n                case 3: return '13:d';\r\n                default: return 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    \r\n\r\n\r\n    isRoundOver = (cards, cardsNum) => {\r\n        if (cards.length === 4) {\r\n            return true\r\n        } else if (cardsNum === 20) {\r\n            return true\r\n        }\r\n        return false\r\n    }\r\n    showCard = (card) => {\r\n        if (this.state.selectedCard.indexOf(card) === -1) {\r\n            this.setState(state => {\r\n                const selectedCard = state.selectedCard.concat(card)\r\n                return {\r\n                    selectedCard,\r\n                };\r\n            })\r\n        } else {\r\n            var selectedCard = [...this.state.selectedCard]\r\n            const index = this.state.selectedCard.indexOf(card);\r\n            selectedCard.splice(index, 1)\r\n            this.setState({ selectedCard: selectedCard })\r\n        }\r\n        return 0;\r\n    }\r\n\r\n   \r\n\r\n\r\n    generatePlayersData = () => {\r\n        const players = this.state.players\r\n        const p1 = this.state.player1\r\n        const p2 = this.state.player2\r\n        const p3 = this.state.player3\r\n        const p4 = this.state.player4\r\n        const p5 = this.state.player5\r\n        players.map(\r\n            (data, key) => {\r\n                if (key === 0) {\r\n                    if (p1.set === false) {\r\n                        const dataf = data.split('|')\r\n                        p1.pseudo = dataf[0]\r\n                        for (let i = 0; i < dataf[1]; i++) { p1.cards.push(0) }\r\n                        p1.set = true;\r\n                    }\r\n                } if (key === 1) {\r\n                    if (p2.set === false) {\r\n                        const dataf = data.split('|')\r\n                        p2.pseudo = dataf[0];\r\n                        for (let i = 0; i < dataf[1]; i++) { p2.cards.push(0) }\r\n                        p2.set = true;\r\n                    }\r\n                } if (key === 2) {\r\n                    if (p3.set === false) {\r\n                        const dataf = data.split('|')\r\n                        p3.pseudo = dataf[0];\r\n                        for (let i = 0; i < dataf[1]; i++) { p3.cards.push(0) }\r\n                        p3.set = true;\r\n                    }\r\n                } if (key === 3) {\r\n                    if (p4.set === false) {\r\n                        const dataf = data.split('|')\r\n                        p4.pseudo = dataf[0]\r\n                        for (let i = 0; i < dataf[1]; i++) { p4.cards.push(0) }\r\n                        p4.set = true;\r\n                    }\r\n                } if (key === 4) {\r\n                    if (p5.set === false) {\r\n                        const dataf = data.split('|')\r\n                        p5.pseudo = dataf[0]\r\n                        for (let i = 0; i < dataf[1]; i++) { p5.cards.push(0) }\r\n                        p5.set = true;\r\n                    }\r\n                }\r\n                return 0;\r\n            }\r\n        )\r\n        this.setState({ player1: p1, player2: p2, player3: p3, player4: p4, player5: p5 })\r\n        \r\n    }\r\n\r\n\r\n    resetError = () => {\r\n        const error = { type: null, title: null, message: null, variant: null }\r\n        this.setState({ errorMessage: error })\r\n    }\r\n\r\n    pileTypeCard = () => {\r\n        const pile = this.state.pile\r\n        if (pile.length === 0) {\r\n            return -1\r\n        }\r\n        else {\r\n            const numPile = this.whatCardIs(pile[0]).split(':')\r\n            if (numPile[0] === 0) {\r\n                return 10\r\n            }\r\n            else {\r\n                return Number(numPile[0])\r\n            }\r\n        }\r\n    }\r\n    sameSelectedCard = () => {\r\n        var selCard = this.state.selectedCard\r\n        var len = selCard.length\r\n        var prev1 = this.whatCardIs(selCard[0]).split(':')\r\n        var prev = prev1[0]\r\n        if (len === 1) {\r\n            return Number(prev)\r\n        }\r\n        else {\r\n\r\n            for (let i = 0; i < len; i++) {\r\n                const actual = this.whatCardIs(selCard[i]).split(':')\r\n                if (prev !== actual[0]) {\r\n                    return -1\r\n                }\r\n                prev = actual[0]\r\n            }\r\n            return Number(prev)\r\n        }\r\n    }\r\n    canHeStart(){\r\n        if(this.state.countRound < 1)\r\n        {\r\n            const currUser = this.state.currentUser\r\n            if (this.state.playerCard.indexOf('25') !== -1) {\r\n                this.setState({ playerToken: 1 })\r\n                gameSocket.emit('startPlaying', { user: currUser })\r\n            } else {\r\n\r\n            }\r\n        }\r\n    }\r\n    canHePlay = () => {\r\n        if (this.state.playerToken === 1) {\r\n            const actualPile = this.state.pile\r\n            //const playerCard = this.state.playerCard\r\n            const selCard = this.state.selectedCard\r\n            const ssc = this.sameSelectedCard()\r\n            const ptc = this.pileTypeCard()\r\n            if (actualPile.length > selCard.length && ssc !== 20) {\r\n                const error = { type: 'rules', title: 'You cannot play this', message: 'You cannot play fewer cards than there are in the pile', variant: 'danger' }\r\n                this.setState({ errorMessage: error })\r\n\r\n            }\r\n            else if (ssc === -1 && ssc !== 20) {\r\n                const error = { type: 'rules', title: 'You cannot play this', message: 'You cannot play two cards of different value', variant: 'danger' }\r\n                this.setState({ errorMessage: error })\r\n            } else if (ssc < ptc && ssc !== 20) {\r\n                const error = { type: 'rules', title: 'You cannot play this', message: 'You cannot play one or more cards smaller than those in the pile', variant: 'danger' }\r\n                this.setState({ errorMessage: error })\r\n            }\r\n            else if (actualPile.length - 1 > selCard.length && ssc === 20) {\r\n                const error = { type: 'rules', title: 'You cannot play this', message: 'You need an extra 2 if you want to cut a series of 3 cards', variant: 'danger' }\r\n                this.setState({ errorMessage: error })\r\n            }\r\n            else {\r\n\r\n                const message = { type: 'finish', title: 'You just played', message: 'Wait for your turn.', variant: 'success' }\r\n                \r\n                \r\n                const user = this.state.currentUser\r\n                let counter = this.state.countTurn\r\n                counter++;\r\n                const copyTable = this.state.orderTurn.slice()\r\n                const nextUser= copyTable[counter]\r\n                this.setState({ errorMessage: message, playerToken: 0,countTurn: counter})\r\n                gameSocket.emit('finishTurn', nextUser)\r\n\r\n                this.delSelectedCard()\r\n                this.changePile(selCard, ssc)\r\n            }\r\n\r\n        }\r\n        else {\r\n            const error = { type: 'Not your turn', title: 'You cant play now', message: 'Its not your turn, wait for it.', variant: '' }\r\n            this.setState({ errorMessage: error })\r\n        }\r\n\r\n    }\r\n\r\n    changePile = (newCards, newCardsNum) => {\r\n\r\n        if (this.isRoundOver(newCards, newCardsNum) === false) {\r\n            const game_id= this.state.game_id\r\n            gameSocket.emit('chgpile', {newcds :newCards, gid : game_id})\r\n        }\r\n        else{\r\n            //switch socket.\r\n            const game_id= this.state.game_id\r\n            gameSocket.emit('chgpile', {newcds :newCards, gid : game_id})\r\n        }\r\n\r\n    }\r\n    playButton = () => {\r\n        return (\r\n            <div style={this.state.defStyle}>\r\n                <Button>Play selected cards</Button>\r\n            </div>\r\n        )\r\n    }\r\n    isThereErrorMessage = () => {\r\n        if (this.state.errorMessage.type === 'rules') {\r\n            return (\r\n                <Row style={this.state.defStyle}>\r\n                    <Alert variant={this.state.errorMessage.variant}>\r\n                        <Alert.Heading>{this.state.errorMessage.title}</Alert.Heading>\r\n                        {this.state.errorMessage.message}\r\n                        <br />Check the rules for more informations\r\n                    </Alert>\r\n                </Row>\r\n            )\r\n        } else if (this.state.errorMessage.type === 'finish') {\r\n            return (\r\n                <Row style={this.state.defStyle}>\r\n                    <Alert variant={this.state.errorMessage.variant} onClose={() => this.resetError()} dismissible>\r\n                        <Alert.Heading>{this.state.errorMessage.title}</Alert.Heading>\r\n                        {this.state.errorMessage.message}\r\n                    </Alert>\r\n                </Row>\r\n            )\r\n        } else if(this.state.errorMessage.type ==='token'){\r\n            return (\r\n                <Row style={this.state.defStyle}>\r\n                    <Alert variant={this.state.errorMessage.variant} onClose={() => this.resetError()} dismissible>\r\n                        <Alert.Heading>{this.state.errorMessage.title}</Alert.Heading>\r\n                        {this.state.errorMessage.message}\r\n                    </Alert>\r\n                </Row>\r\n            )\r\n        }\r\n\r\n    }\r\n    isThere4Players = () => {\r\n        if (this.state.player4.pseudo !== null) {\r\n            return (\r\n                <div>\r\n                    <Row style={this.state.defStyle}>\r\n                        {\r\n                            this.state.player4.cards.map((value, key) => {\r\n                                return <Carte num={value} index={key} identity='othercards' />\r\n                            })}\r\n                    </Row>\r\n                    <br />\r\n                    <Row style={this.state.defStyle}>\r\n                        {this.state.player4.pseudo !== null ? <span style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>{this.state.player4.pseudo}</span> : <span></span>}\r\n                    </Row>\r\n                </div>\r\n            )\r\n        } else {\r\n            return (\r\n                <div>\r\n                    <span></span>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    isThere5Players = () => {\r\n        if (this.state.player5.pseudo !== null) {\r\n            return (\r\n                <div>\r\n                    <Row style={this.state.defStyle}>\r\n                        {\r\n                            this.state.player5.cards.map((value, key) => {\r\n                                return <Carte num={value} index={key} identity='othercards' />\r\n                            })}\r\n                    </Row>\r\n                    <br />\r\n                    <Row style={this.state.defStyle}>\r\n                        {this.state.player5.pseudo !== null ? <span style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>{this.state.player5.pseudo}</span> : <span></span>}\r\n                    </Row>\r\n                </div>\r\n            )\r\n        } else {\r\n            return (\r\n                <div>\r\n                    <span></span>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        const currUser = this.state.currentUser;\r\n        const gameId = this.state.gameId\r\n        gameSocket.on('connection', function (data) {\r\n\r\n        })\r\n        // Requete backend pour savoir les cartes de l'utilisateur local\r\n        gameSocket.emit('join_game', {gid: this.state.game_id, user: this.state.currentUser})\r\n        gameSocket.on('userCard',(sdata) => {\r\n            const json = sdata\r\n            json.forEach(({ user, card }) => {\r\n                this.setState(state => {\r\n                    const playerCard = state.playerCard.concat(card)\r\n                    return {\r\n                        playerCard,\r\n                    };\r\n                }, this.canHeStart)\r\n            })\r\n        })\r\n        // Requete backend pour avoir le nombre de carte des joueurs\r\n        gameSocket.on('othersCount',(sdata) =>{\r\n            const json = sdata\r\n            this.setState({ playersData: json })\r\n                json.forEach(({ user, Ncards }) => {\r\n                    const passerelle = user + '|' + Ncards\r\n                    this.setState(state => {\r\n                        const players = state.players.concat(passerelle)\r\n                        return {\r\n                            players,\r\n                        };\r\n                }, this.generatePlayersData)\r\n            })\r\n        })\r\n        \r\n        gameSocket.on('cardsPot', (sdata) => {\r\n            const json = sdata\r\n            json.forEach(({ user, card }) => {\r\n                this.setState(state => {\r\n                    const pile = state.pile.concat(card)\r\n                    return {\r\n                        pile,\r\n                    };\r\n                })\r\n            })\r\n        })\r\n        \r\n        gameSocket.on('newpile', (sdata) =>{\r\n            const newpile = sdata\r\n            this.setState({ pile: newpile })\r\n        })\r\n\r\n        gameSocket.on('playerdeconnexion', (sdata) =>{\r\n            const player = sdata.user;\r\n        })\r\n        gameSocket.on('userPlayed', (sdata)=>{\r\n            let counter = this.state.countTurn\r\n            counter++;\r\n            if(sdata===currUser){\r\n                const msg={ type: 'turn', title: 'La partie a commencé', message: `C'est a toi de jouer chef`, variant: 'success' }\r\n                this.setState({playerToken: 1, errorMessage : msg})\r\n            }\r\n            this.setState({countTurn: counter})\r\n        })\r\n        gameSocket.on('gameStarted', (sdata)=>{\r\n            const msg = { type: 'start', title: 'La partie a commencé', message: `${sdata} dispose de la dame de coeur, il commence la partie`, variant: 'info' }\r\n            this.setState({errorMessage: msg})\r\n        })\r\n        const playerCard=this.state.playerCard\r\n\r\n\r\n    }\r\n\r\n    delSelectedCard = () => {\r\n        const selCard = this.state.selectedCard\r\n        var userCard = this.state.playerCard\r\n        gameSocket.emit('delcard',{gid: this.state.game_id, us:this.state.currentUser, sc : this.state.selectedCard, usc : this.state.playerCard})\r\n        gameSocket.on('delcardReturn', (sdata)=>{\r\n            const userCard = sdata;\r\n            this.setState({ playerCard: userCard, selectedCard: [] })\r\n        })\r\n    }\r\n    closeAlert = () => {\r\n        this.setState({ showAlert: false })\r\n    }\r\n\r\n    componentDidUpdate() {\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div style={{\r\n                border: '1px solid black',\r\n                backgroundColor: '#5DAB51',\r\n\r\n            }}>\r\n                <Container fluid>\r\n                    <Row>\r\n                        <Col>\r\n                            {/* Rien */}\r\n                        </Col>\r\n                        <Col>\r\n                            <Container fluid >\r\n                                <Row style={this.state.defStyle}>\r\n                                    {\r\n                                        this.state.player1.cards.map((value, key) => {\r\n                                            return <Carte num={value} index={key} identity='othercards' />\r\n                                        })}\r\n                                </Row>\r\n                                <br />\r\n                                <Row style={this.state.defStyle}>\r\n                                    {this.state.player1.pseudo !== null ? <span style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>{this.state.player1.pseudo}</span> : <span></span>}\r\n                                </Row>\r\n                            </Container>\r\n                        </Col>\r\n                        <Col>\r\n                            {/* Rien */}\r\n                        </Col>\r\n                    </Row>\r\n                    <br />\r\n                    <br />\r\n                    <Row>\r\n                        <Col>\r\n                            <Row style={this.state.defStyle}>\r\n                                {\r\n                                    this.state.player2.cards.map((value, key) => {\r\n                                        return <Carte num={value} index={key} identity='othercards' />\r\n                                    })}\r\n                            </Row>\r\n                            <br />\r\n                            <Row style={this.state.defStyle}>\r\n                                {this.state.player2.pseudo !== null ? <span style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>{this.state.player2.pseudo}</span> : <span></span>}\r\n                            </Row>\r\n\r\n                        </Col>\r\n                        <Col style={{ border: '2px solid red', borderRadius: '10px', }}>\r\n                            <Row style={this.state.defStyle}>\r\n                                {this.state.switcher === true ? <span id={String(this.state.switcher)}>Pile</span> : <span id={String(this.state.switcher)}>Pile</span>}\r\n                            </Row>\r\n                            <Row style={this.state.defStyle}>\r\n                                {\r\n                                    this.state.pile === [] ? <span>VIDE</span> : this.state.pile.map((value, key) => {\r\n                                        return <Carte num={value} index={key} identity='cards' />\r\n                                    })\r\n                                }\r\n                            </Row>\r\n                            <br />\r\n                            <Row>\r\n\r\n                            </Row>\r\n                        </Col>\r\n                        <Col>\r\n                            <Row style={this.state.defStyle}>\r\n                                {\r\n                                    this.state.player3.cards.map((value, key) => {\r\n                                        return <Carte num={value} index={key} identity='othercards' />\r\n                                    })}\r\n                            </Row>\r\n                            <br />\r\n                            <Row style={this.state.defStyle}>\r\n                                {this.state.player3.pseudo !== null ? <span style={{ display: 'flex', justifyContent: 'center', alignItems: 'center' }}>{this.state.player3.pseudo}</span> : <span></span>}\r\n                            </Row>\r\n                        </Col>\r\n                    </Row>\r\n                    <br />\r\n                    <br />\r\n                    <Row>\r\n                        <Col>\r\n                            {this.isThere4Players()}\r\n                        </Col>\r\n                        <Col>\r\n                            {this.isThereErrorMessage()}\r\n                        </Col>\r\n                        <Col>\r\n                            {this.isThere5Players()}\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n                <br />\r\n                <br />\r\n                <Container fluid>\r\n                    <Row>\r\n                        {this.state.playerToken ===1 ? <Col style={this.state.defStyle}><Button variant='secondary' block disable>pass</Button></Col> : <Col style={this.state.defStyle}><Button block >pass</Button></Col>}\r\n                        <Col style={this.state.defStyle}>\r\n                            {\r\n                                this.state.playerCard.map((value, index) => {\r\n                                    if (this.state.selectedCard.indexOf(value) !== -1) {\r\n                                        return <Carte num={value} index={index} identity='usercards' action={this.showCard} style={this.state.cardStyle} />;\r\n                                    } else {\r\n                                        return <Carte num={value} index={index} identity='usercards' action={this.showCard} />;\r\n                                    }\r\n                                })\r\n                            }\r\n                        </Col>\r\n                        {this.state.selectedCard.length > 0 ? this.state.playerToken === 1 ? <Col style={this.state.defStyle}><Button onClick={() => this.canHePlay()} block>Play selected cards</Button></Col> :<Col style={this.state.defStyle}><Button variant=\"secondary\" block disabled>Play selected cards</Button></Col> : <Col style={this.state.defStyle}><Button variant=\"secondary\" block disabled>Play selected cards</Button></Col>}\r\n\r\n                    </Row>\r\n                </Container>\r\n                <br />\r\n                <br />\r\n                <br />\r\n\r\n                <div></div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Game;\r\n\r\n\r\n\r\n\r\n/*{\r\n            ace :   '1:14:27:40' ,\r\n            two:    '2:15:28:41',\r\n            three:  '3:16:29:42',\r\n            four:   '4:17:30:43',\r\n            five:   '5:18:31:44',\r\n            six:    '6:19:32:45',\r\n            seven:  '7:20:33:46',\r\n            eight:  '8:21:34:47',\r\n            nine:   '9:22:35:48',\r\n            ten:    '10:23:36:49',\r\n            jack:   '11:24:37:50',\r\n            queen:  '12:25:38:51',\r\n            king:   '13:26:39:52',\r\n\r\n            } */\r\n","C:\\Users\\abomb\\Documents\\ProjetDW_aout\\hosting\\projet\\client\\src\\components\\Carte.js",[],"C:\\Users\\abomb\\Documents\\ProjetDW_aout\\hosting\\projet\\client\\src\\components\\NavigationHisto.js",[],"C:\\Users\\abomb\\Documents\\ProjetDW_aout\\hosting\\projet\\client\\src\\components\\NavigationAutres.js",[],"C:\\Users\\abomb\\Documents\\ProjetDW_aout\\hosting\\projet\\client\\src\\components\\NavigationProfil.js",[],"C:\\Users\\abomb\\Documents\\ProjetDW_aout\\hosting\\projet\\client\\src\\pages\\Home\\Home.js",["86","87","88","89","90","91","92","93","94","95","96","97","98","99","100","101","102","103","104","105","106","107"],"import React from \"react\";\r\n//import { Component } from \"react\";\r\n\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Row, Col, Container, Alert } from 'react-bootstrap'\r\nimport Lobby from './components/Lobby'\r\nimport Pool from './components/Pool'\r\nimport Select from 'react-select'\r\nimport io, { Socket } from \"socket.io-client\";\r\n//import App from \"../../App\";\r\n//import Profil from \"../Profil/Profil\";\r\n\r\n\r\n\r\nconst options = [\r\n    { value: '4', label: '4' },\r\n    { value: '5', label: '5' },\r\n    { value: '6', label: '6' },\r\n]\r\n\r\nlet lobbySocket\r\n\r\nclass Home extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            gameCode: '',\r\n            gameFromCode: '',\r\n            pseudo: undefined,\r\n            gameId: undefined,\r\n            maxPlayers: undefined,\r\n            playerToken: 0,\r\n            lobby: undefined,\r\n            joinedGame: undefined,\r\n            createGame: undefined,\r\n            pool: undefined,\r\n            connectionConfig: {\r\n                \"force new connection\": true,\r\n                \"reconnectionAttemps\": \"Infinity\",\r\n                \"timeout\": 10000,\r\n                \"transports\": [\"websocket\"]\r\n            },\r\n            endpoint: 'localhost:5003',\r\n            message: { type: undefined, title: undefined, txt: undefined, variant: undefined },\r\n            defStyle: { display: 'flex', justifyContent: 'center', alignItems: 'center' },\r\n\r\n        }\r\n        this.launchGame = this.launchGame.bind(this)\r\n        this.handleCreate = this.handleCreate.bind(this)\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.handleLeave = this.handleLeave.bind(this)\r\n        lobbySocket = io(this.state.endpoint, this.state.connectionConfig);\r\n    }\r\n    /**************  HOME **************/\r\n\r\n    /**********  HANDLE  **********/\r\n\r\n    //handle joining with a code\r\n    handleCreate(event) {\r\n        event.preventDefault();\r\n        let isIn = false;\r\n        if (this.state.pseudo === undefined) {\r\n            if (localStorage.getItem('Pseudo') === undefined) {\r\n                if (localStorage.getItem('guestPseudo') !== undefined) {\r\n                    this.setState({ pseudo: localStorage.getItem('guestPseudo') })\r\n                }\r\n                else {\r\n                    alert('VOUS DEVEZ VOUS ENREGISTRER EN GUEST OU AVEC VOTRE COMPTE.')\r\n                }\r\n                this.setState({ pseudo: localStorage.getItem('Pseudo') })\r\n                alert(\"Votre pseudo n'a pas été pris en compte, veuillez réessayer\")\r\n                return 0;\r\n            }\r\n        }\r\n        for (let item of this.state.pool) {\r\n            if (this.state.gameId === item.gameId) { isIn = true }\r\n        }\r\n        if (!isIn) {\r\n            lobbySocket.emit('createLobby', { gid: this.state.gameId, mpv: this.state.maxPlayers.value })\r\n        }\r\n        else {\r\n            alert(\"This name is already used\");\r\n        }\r\n    };\r\n    async handleOwnerJoin(gameId, pseudo) {\r\n        //puts himself in the lobby as owner\r\n\r\n        lobbySocket.emit('repGameCreated', { user: pseudo, gid: gameId, token: 1 })\r\n        this.setState({ playerToken: 1, gameId: gameId, createGame: undefined });\r\n        localStorage.setItem(\"gameId\", gameId);\r\n        localStorage.setItem(\"pseudo\", pseudo);\r\n    }\r\n\r\n    handleLobby() {\r\n        this.setState({ createGame: true })\r\n    }\r\n    handleExitCreate() {\r\n        this.setState({ createGame: undefined })\r\n    }\r\n    async handleSubmit(event) {\r\n        event.preventDefault();\r\n        await fetch(`http://135.125.101.210:5000/game/${this.state.gameCode}`)\r\n            .then(response => response.json())\r\n            .then(json => {\r\n                localStorage.setItem(\"joinedGame\", json[0].gameId);\r\n            })\r\n        this.setState({ gameFromCode: localStorage.getItem(\"joinedGame\") });\r\n\r\n        await fetch(`http://135.125.101.210:5000/lobby/${localStorage.getItem(\"joinedGame\")}`)\r\n            .then(response => response.json())\r\n            .then(json => {\r\n                this.setState({ lobby: json });\r\n\r\n            })\r\n\r\n\r\n        let index = undefined;\r\n        for (let item in this.state.pool) {\r\n            if (this.state.pool[item].gameId === localStorage.getItem(\"joinedGame\")) {\r\n                index = item\r\n            }\r\n        }\r\n\r\n        if (this.state.pool[index].currPlayers >= this.state.pool[index].maxPlayers) {\r\n            localStorage.removeItem(\"joinedGame\");\r\n            this.setState({ gameFromCode: undefined });\r\n            alert('lobby is full');\r\n        }\r\n        else {\r\n            await fetch('http://135.125.101.210:5000/lobbyp', {\r\n                method: 'POST',\r\n                headers: {\r\n                    Accept: 'application/json',\r\n                    'Content-Type': 'application/json',\r\n                    \"Acces-Control-Allow-Origin\": \"true\"\r\n                },\r\n                body: JSON.stringify({\r\n                    gameId: localStorage.getItem(\"joinedGame\"),\r\n                    pseudo: this.state.pseudo,\r\n                    token: 1,\r\n                })\r\n            })\r\n\r\n\r\n            await fetch('http://135.125.101.210:5000/icount', {\r\n                method: 'POST',\r\n                headers: {\r\n                    Accept: 'application/json',\r\n                    'Content-Type': 'application/json',\r\n                    \"Acces-Control-Allow-Origin\": \"true\"\r\n                },\r\n                body: JSON.stringify({\r\n                    gameId: localStorage.getItem(\"joinedGame\"),\r\n                })\r\n            })\r\n\r\n\r\n            await fetch(`http://135.125.101.210:5000/token/${localStorage.getItem(\"joinedGame\")}/${this.state.pseudo}`)\r\n                .then(response => response.json())\r\n                .then(json => {\r\n                    this.setState({ playerToken: json[0].token });\r\n                })\r\n\r\n            this.setState({ joinedGame: localStorage.getItem(\"joinedGame\") });\r\n\r\n            await fetch(`http://135.125.101.210:5000/lobby/${localStorage.getItem(\"joinedGame\")}`)\r\n                .then(response => response.json())\r\n                .then(json => {\r\n                    this.setState({ lobby: json });\r\n\r\n                })\r\n        }\r\n    }\r\n\r\n    //handle joining a game\r\n    handleJoin = async (gameId) => {\r\n        await fetch(`http://135.125.101.210:5000/exist/${gameId}`)\r\n            .then(response => response.json())\r\n            .then(json => {\r\n                if (json[0].bool === 0) {\r\n                    const msg = { type: 'pool', title: \"Lobby not found\", txt: \"The lobby you want to join no longer exists, if the lobby is still displayed, please contact an administrator\", variant: 'danger' }\r\n                    this.setState({ message: msg });\r\n                    return 0;\r\n                }\r\n            })\r\n        if (this.state.pseudo === undefined) {\r\n            if (localStorage.getItem('Pseudo') === undefined) {\r\n                if (localStorage.getItem('guestPseudo') !== undefined) {\r\n                    this.setState({ pseudo: localStorage.getItem('guestPseudo') })\r\n                }\r\n                else {\r\n                    alert('VOUS DEVEZ VOUS ENREGISTRER EN GUEST OU AVEC VOTRE COMPTE.')\r\n                }\r\n                this.setState({ pseudo: localStorage.getItem('Pseudo') })\r\n                alert(\"Votre pseudo n'a pas été pris en compte, veuillez réessayer\")\r\n                return 0;\r\n            }\r\n        }\r\n        if (this.state.message.txt === undefined) {\r\n            lobbySocket.emit('playerJoin', { gid: gameId, user: this.state.pseudo, token: 0 })\r\n            this.setState({ gameId: gameId })\r\n\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n    \r\n    \r\n    \r\n    //handle leaving a lobby\r\n\r\n    handleLeave() {\r\n        const gameId = this.state.joinedGame;\r\n        if (this.state.playerToken === 0) {\r\n            lobbySocket.emit('playerLeaving', { gid: gameId, user: this.state.pseudo })\r\n            this.setState({ joinedGame: undefined, gameId: undefined });\r\n        }\r\n        else if (this.state.playerToken === 1) {\r\n            lobbySocket.emit('ownerLeaving', { gid: gameId })\r\n            this.setState({ joinedGame: undefined, playerToken: 0, gameId: undefined });\r\n        }\r\n    }\r\n\r\n\r\n    async handleRefresh(gameId) {\r\n        await fetch(`http://135.125.101.210:5000/lobby/${gameId}`)\r\n            .then(response => response.json())\r\n            .then(json => {\r\n                this.setState({ lobby: json });\r\n            })\r\n    }\r\n\r\n    async handleRefreshGames() {\r\n        await fetch('http://135.125.101.210:5000/pool')\r\n            .then(response => response.json())\r\n            .then(json => {\r\n                this.setState({ pool: Object.values(json) });\r\n            })\r\n    }\r\n\r\n    launchGame = () => {\r\n\r\n        const lobby = this.state.lobby\r\n        const gameId = this.state.gameId\r\n        fetch('http://135.125.101.210:5000/deck', {\r\n            method: 'POST',\r\n            headers: {\r\n                Accept: 'application/json',\r\n                'Content-Type': 'application/json',\r\n                \"Acces-Control-Allow-Origin\": \"true\"\r\n            },\r\n            body: JSON.stringify({\r\n                gameId: gameId,\r\n                lobby: lobby,\r\n            })\r\n        })\r\n\r\n        const copyLobby = this.state.lobby\r\n        const user = this.state.pseudo\r\n        let index;\r\n        copyLobby.map((data, keys) => {\r\n            if (data.user === user) {\r\n                index = keys\r\n            }\r\n        })\r\n        let orderedLobby;\r\n        switch (index) {\r\n            case 0:\r\n                copyLobby.splice(index, 1)\r\n                orderedLobby = copyLobby.slice()\r\n                break;\r\n            case 1:\r\n                copyLobby.splice(index, 1)\r\n                orderedLobby = copyLobby.slice()\r\n                copyLobby.map((data, keys) => {\r\n                    if (keys === 0) {\r\n                        orderedLobby[copyLobby.length - 1] = data\r\n                    }\r\n                    else {\r\n                        orderedLobby[keys - 1] = data\r\n                    }\r\n                })\r\n                break;\r\n            case 2:\r\n                copyLobby.splice(index, 1)\r\n                orderedLobby = copyLobby.slice()\r\n                copyLobby.map((data, keys) => {\r\n                    if (keys === 0) {\r\n                        orderedLobby[copyLobby.length - 2] = data\r\n                    } else if (keys === 1) {\r\n                        orderedLobby[copyLobby.length - 1] = data\r\n                    }\r\n                    else {\r\n                        orderedLobby[keys - 1] = data\r\n                    }\r\n                })\r\n                break;\r\n            case 3:\r\n                copyLobby.splice(index, 1)\r\n                orderedLobby = copyLobby.slice()\r\n                copyLobby.map((data, keys) => {\r\n                    if (keys === 0) {\r\n                        orderedLobby[copyLobby.length - 3] = data\r\n                    } else if (keys === 1) {\r\n                        orderedLobby[copyLobby.length - 2] = data\r\n                    }\r\n                    else if (keys === 2) {\r\n                        orderedLobby[copyLobby.length - 1] = data\r\n                    }\r\n                    else {\r\n                        orderedLobby[keys - 1] = data\r\n                    }\r\n                })\r\n                break;\r\n            case 4:\r\n                copyLobby.splice(index, 1)\r\n                orderedLobby = copyLobby.slice()\r\n                copyLobby.map((data, keys) => {\r\n                    if (keys === 0) {\r\n                        orderedLobby[copyLobby.length - 4] = data\r\n                    } else if (keys === 1) {\r\n                        orderedLobby[copyLobby.length - 3] = data\r\n                    } else if (keys === 2) {\r\n                        orderedLobby[copyLobby.length - 2] = data\r\n                    } else if (keys === 3) {\r\n                        orderedLobby[copyLobby.length - 1] = data\r\n                    }\r\n                    else {\r\n                        orderedLobby[keys - 1] = data\r\n                    }\r\n                })\r\n                break;\r\n            case 5:\r\n                copyLobby.split(index, 1)\r\n                orderedLobby = copyLobby.slice()\r\n                copyLobby.map((data, keys) => {\r\n                    if (keys === 0) {\r\n                        orderedLobby[copyLobby.length - 5] = data\r\n                    } else if (keys === 1) {\r\n                        orderedLobby[copyLobby.length - 4] = data\r\n                    } else if (keys === 2) {\r\n                        orderedLobby[copyLobby.length - 3] = data\r\n                    } else if (keys === 3) {\r\n                        orderedLobby[copyLobby.length - 2] = data\r\n                    } else if (keys === 4) {\r\n                        orderedLobby[copyLobby.length - 1] = data\r\n                    }\r\n                    else {\r\n                        orderedLobby[keys - 1] = data\r\n                    }\r\n                })\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n\r\n        localStorage.setItem('user', user)\r\n        localStorage.setItem('gameId', gameId)\r\n        localStorage.setItem('turn', orderedLobby)\r\n        lobbySocket.emit('launchGame', gameId)\r\n        window.location.href = \"http://localhost:3000/game\"\r\n    }\r\n\r\n\r\n\r\n\r\n    /******* OTHERS FUNCTIONS *********/\r\n\r\n    resetMessage = () => {\r\n        const error = { title: undefined, txt: undefined, variant: undefined }\r\n        this.setState({ message: error })\r\n    }\r\n    showMessage = () => {\r\n        if (this.state.message.type === 'pool') {\r\n            lobbySocket.emit('refreshPool',)\r\n        }\r\n        return (\r\n            <Row style={this.state.defStyle}>\r\n                <Alert variant={this.state.message.variant} onClose={() => this.resetMessage()} dismissible>\r\n                    <Alert.Heading>{this.state.message.title}</Alert.Heading>\r\n                    {this.state.message.txt}\r\n                </Alert>\r\n            </Row>\r\n        )\r\n    }\r\n\r\n\r\n    connexion = () => {\r\n        lobbySocket.on('connection', () => {\r\n            if (this.state.pseudo !== undefined)\r\n                lobbySocket.emit('repconnection', { user: this.state.pseudo })\r\n        })\r\n\r\n    }\r\n\r\n\r\n\r\n    componentDidMount() {\r\n        fetch('http://135.125.101.210:5000/pool')\r\n            .then(response => response.json())\r\n            .then(json => {\r\n                this.setState({ pool: Object.values(json) });\r\n            })\r\n\r\n        if (localStorage.getItem(\"Pseudo\") === undefined) {\r\n            if (localStorage.getItem(\"guestPseudo\") !== undefined) {\r\n                lobbySocket.on('connection', (data) => {\r\n                    lobbySocket.emit('repconnexion', { user: localStorage.getItem(\"guestPseudo\") })\r\n                    this.setState({ pseudo: localStorage.getItem(\"guestPseudo\") })\r\n                })\r\n            }\r\n        }\r\n\r\n        this.setState({ pseudo: localStorage.getItem(\"Pseudo\") })\r\n        const pseudo = this.state.pseudo\r\n        const gameId = this.state.gameId\r\n\r\n\r\n        /*lobbySocket.on('playerDisconnect', (sdata) => {\r\n            const userDisc = sdata.id\r\n            const copyLobby = this.state.lobby\r\n            const index = copyLobby.indexOf(userDisc);\r\n            copyLobby.splice(index, 1)\r\n            this.setState({ lobby: copyLobby })\r\n        })*/\r\n\r\n        lobbySocket.on('lobbyCreated', (sdata) => {\r\n            this.handleOwnerJoin(sdata.gid, this.state.pseudo);\r\n        })\r\n        lobbySocket.on('ownerInfoLobby', (data) => {\r\n            const gameId = this.state.gameId\r\n            this.setState({ joinedGame: gameId, lobby: data });\r\n        })\r\n        lobbySocket.on('playerJoinLobby', (data) => {\r\n            const gameId = this.state.gameId\r\n            this.setState({ lobby: data, joinedGame: gameId })\r\n\r\n\r\n        })\r\n        lobbySocket.on('repPlayerJoin', (data) => {\r\n            this.setState({ joinedGame: gameId, lobby: data, playerToken: 0 })\r\n        })\r\n        lobbySocket.on('chanPlayerLeaving', (data) => {\r\n            this.setState({ lobby: data })\r\n        })\r\n        lobbySocket.on('createLobby', (data) => {\r\n            this.setState({ pool: Object.values(data) })\r\n        })\r\n        lobbySocket.on('closeLobby', (sdata) => {\r\n            lobbySocket.emit('closedLobby', sdata)\r\n            this.handleRefreshGames();\r\n            this.setState({ pool: Object.values(sdata) })\r\n        })\r\n        lobbySocket.on('refreshedPool', (sdata) => {\r\n            this.setState({ pool: Object.values(sdata) })\r\n        })\r\n        lobbySocket.on('joinGame', (sdata) => {\r\n            const user = this.state.pseudo\r\n            const gameId = sdata\r\n            const copyLobby = this.state.lobby.slice()\r\n            let index;\r\n            copyLobby.map((data, keys) => {\r\n                if (data.user === user) {\r\n                    index = keys\r\n                }\r\n            })\r\n            let orderedLobby;\r\n            switch (index) {\r\n                case 0:\r\n                    copyLobby.splice(index, 1)\r\n                    orderedLobby = copyLobby.slice()\r\n                    copyLobby.map((data, keys)=>{\r\n                        orderedLobby.splice(keys,1,data.user)\r\n                    })\r\n                    break;\r\n                case 1:\r\n                    copyLobby.splice(index, 1)\r\n                    orderedLobby = copyLobby.slice()\r\n                    copyLobby.map((data, keys) => {\r\n                        if (keys === 0) {\r\n                            orderedLobby.splice(copyLobby.length - 1 ,1,data.user)\r\n                        }\r\n                        else {\r\n                            orderedLobby.splice(keys - 1 ,1,data.user)\r\n                        }\r\n                    })\r\n                    break;\r\n                case 2:\r\n                    copyLobby.splice(index, 1)\r\n                    orderedLobby = copyLobby.slice()\r\n                    copyLobby.map((data, keys) => {\r\n                        if (keys === 0) {\r\n                            orderedLobby.splice(copyLobby.length - 2 ,1,data.user)\r\n                        } else if (keys === 1) {\r\n                            orderedLobby.splice(copyLobby.length - 1 ,1,data.user)\r\n                        }\r\n                        else {\r\n                            orderedLobby.splice(keys - 1 ,1,data.user)\r\n                        }\r\n                    })\r\n                    break;\r\n                case 3:\r\n                    copyLobby.splice(index, 1)\r\n                    orderedLobby = copyLobby.slice()\r\n                    copyLobby.map((data, keys) => {\r\n                        if (keys === 0) {\r\n                            orderedLobby.splice(copyLobby.length - 3 ,1,data.user)\r\n                        } else if (keys === 1) {\r\n                            orderedLobby.splice(copyLobby.length - 2 ,1,data.user)\r\n                        }\r\n                        else if (keys === 2) {\r\n                            orderedLobby.splice(copyLobby.length - 1 ,1,data.user)\r\n                        }\r\n                        else {\r\n                            orderedLobby.splice(keys - 1 ,1,data.user)\r\n                        }\r\n                    })\r\n                    break;\r\n                case 4:\r\n                    copyLobby.splice(index, 1)\r\n                    orderedLobby = copyLobby.slice()\r\n                    copyLobby.map((data, keys) => {\r\n                        if (keys === 0) {\r\n                            orderedLobby.splice(copyLobby.length - 4 ,1,data.user)\r\n                        } else if (keys === 1) {\r\n                            orderedLobby.splice(copyLobby.length - 3 ,1,data.user)\r\n                        } else if (keys === 2) {\r\n                            orderedLobby.splice(copyLobby.length - 2 ,1,data.user)\r\n                        } else if (keys === 3) {\r\n                            orderedLobby.splice(copyLobby.length - 1 ,1,data.user)\r\n                        }\r\n                        else {\r\n                            orderedLobby.splice(keys - 1 ,1,data.user)\r\n                        }\r\n                    })\r\n                    break;\r\n                case 5:\r\n                    copyLobby.split(index, 1)\r\n                    orderedLobby = copyLobby.slice()\r\n                    copyLobby.map((data, keys) => {\r\n                        if (keys === 0) {\r\n                            orderedLobby.splice(copyLobby.length - 5 ,1,data.user)\r\n                        } else if (keys === 1) {\r\n                            orderedLobby.splice(copyLobby.length - 4 ,1,data.user)\r\n                        } else if (keys === 2) {\r\n                            orderedLobby.splice(copyLobby.length - 3 ,1,data.user)\r\n                        } else if (keys === 3) {\r\n                            orderedLobby.splice(copyLobby.length - 2 ,1,data.user)\r\n                        } else if (keys === 4) {\r\n                            orderedLobby.splice(copyLobby.length - 1 ,1,data.user)\r\n                        }\r\n                        else {\r\n                            orderedLobby.splice(keys - 1 ,1,data.user)\r\n                        }\r\n                    })\r\n                    break;\r\n                default:\r\n                    break;\r\n            }\r\n            localStorage.setItem('turn', orderedLobby)\r\n            localStorage.setItem('user', user)\r\n            localStorage.setItem('gameId', gameId)\r\n\r\n            window.location.href = \"http://localhost:3000/game\"\r\n        })\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        if (this.state.joinedGame) {\r\n            return (\r\n                <Container fluid>\r\n                    <Col style={{\r\n                        border: '2px solid moccasin',\r\n                        borderRadius: '10px',\r\n                        backgroundColor: 'palegoldenrod'\r\n                    }}> {this.state.message.txt === undefined ? <a></a> : this.showMessage()}\r\n                        <Row>\r\n                            <h4>Lobby: {this.state.joinedGame}</h4>\r\n                            <br />\r\n                        </Row>\r\n                        <Row>\r\n\r\n                        </Row>\r\n\r\n                        <Row>\r\n                            <h5>Players:</h5>\r\n                        </Row>\r\n\r\n\r\n                        <Lobby\r\n                            userLobby={Object.values(this.state.lobby)}\r\n                            actionLaunchGame={this.launchGame}\r\n                        />\r\n                        <br />\r\n                        <Row>\r\n                            <Container fluid>\r\n                                <Row className=\"justify-content-md-center\">\r\n                                    <Col fluid>\r\n                                        <Button variant=\"outline-info\" onClick={this.handleLeave} block>Leave</Button>\r\n                                    </Col>\r\n                                    <Col fluid>\r\n                                        {this.state.playerToken === 1 ? this.state.lobby.length >= 4 ? <Button variant=\"outline-info\" onClick={() => this.launchGame()} block> Start Game </Button> : <Button variant=\"outline-secondary\" block disabled> Start Game </Button> : <p></p>}\r\n                                    </Col>\r\n                                </Row>\r\n                            </Container>\r\n                        </Row>\r\n\r\n\r\n\r\n\r\n                    </Col>\r\n                </Container>\r\n            )\r\n        }\r\n\r\n        else if (this.state.createGame) {\r\n            return (\r\n                <Container>\r\n                    <Col style={{\r\n                        border: '2px solid moccasin',\r\n                        borderRadius: '10px',\r\n                        backgroundColor: 'palegoldenrod'\r\n                    }}> {this.state.message.txt === undefined ? <a></a> : this.showMessage()}\r\n\r\n                        <Row>\r\n                            <Container>\r\n                                <Col>\r\n                                    <h2>Create a game</h2>\r\n                                    <br /><br />\r\n\r\n\r\n                                    <form onSubmit={this.handleCreate}>\r\n\r\n                                        <label>\r\n                                            <p>Lobby's name :</p>\r\n                                            <input type=\"text\" value={this.state.gameId} onChange={text => this.setState({ gameId: text.target.value })} />\r\n                                        </label>\r\n                                        <br /><br />\r\n\r\n                                        <label>\r\n                                            <p>Amount of player : </p>\r\n                                            <Select options={options} value={this.state.maxPlayers} onChange={value => this.setState({ maxPlayers: value })} />\r\n                                        </label>\r\n                                        <br /><br />\r\n                                        <input type=\"submit\" value=\"Create lobby\" />\r\n                                        <Button variant=\"outline-info\" size=\"lg\" onClick={() => this.handleExitCreate()}>exit</Button>\r\n                                    </form>\r\n\r\n\r\n\r\n                                </Col>\r\n                            </Container>\r\n                        </Row>\r\n                    </Col>\r\n                </Container>\r\n            );\r\n        }\r\n\r\n        else {\r\n            return (\r\n                <Container fluid>\r\n                    <Col style={{\r\n                        border: '2px solid moccasin',\r\n                        borderRadius: '10px',\r\n                        backgroundColor: 'palegoldenrod'\r\n                    }}> {this.state.message.txt === undefined ? <a></a> : this.showMessage()}\r\n                        <Row>\r\n                            <Button\r\n                                variant=\"outline-info\"\r\n                                size=\"lg\"\r\n                                onClick={() => this.handleLobby()}\r\n                            >\r\n                                Create Game\r\n                            </Button>\r\n                           \r\n                            \r\n                            <br />\r\n                        </Row>\r\n                        <Col>\r\n                            <Row>\r\n                                <form onSubmit={this.handleSubmit}>\r\n\r\n                                    <Row>\r\n                                        <h4>Join with a code</h4>\r\n                                        <br />\r\n                                    </Row>\r\n\r\n                                    <input type=\"text\" value={this.state.gameCode} onChange={text => this.setState({ gameCode: text.target.value })} />\r\n\r\n                                    <input type=\"submit\" value=\"Enter Game\" />\r\n                                </form>\r\n                            </Row>\r\n                        </Col>\r\n                        <Row>\r\n\r\n                            <Col>\r\n                                <Row>\r\n                                    <h4>Find games</h4>\r\n                                    <br />\r\n                                </Row>\r\n\r\n                                {this.state.pool === undefined ? <br /> : <Pool\r\n                                    pool={this.state.pool}\r\n                                    actionJoin={this.handleJoin}\r\n                                />}\r\n\r\n                            </Col>\r\n\r\n                        </Row>\r\n                    </Col>\r\n                </Container>\r\n            )\r\n        }\r\n\r\n\r\n    }\r\n}\r\nexport default Home","C:\\Users\\abomb\\Documents\\ProjetDW_aout\\hosting\\projet\\client\\src\\pages\\Home\\components\\Pool.js",["108","109"],"import React, { Component } from 'react';\r\nimport { Button, Row, Col, Container, Badge } from 'react-bootstrap'\r\n\r\n\r\nclass Pool extends Component {\r\n    render() {\r\n        return(\r\n            <Container fluid>\r\n                {this.props.pool.map((data, key)=>{\r\n                    if (data.currPlayers >= data.maxPlayers){\r\n                        return <Row key={key}><Button variant=\"danger\">Full [{data.currPlayers}/{data.maxPlayers}]</Button><p>{data.gameId}</p></Row>\r\n                    }\r\n                    else {\r\n                        return <Row key={key}><Button variant=\"success\" onClick={() => this.props.actionJoin(data.gameId)}>Join [{data.currPlayers}/{data.maxPlayers}]</Button><p>{data.gameId}</p></Row>\r\n                    }\r\n                })}\r\n            </Container>\r\n        )\r\n    }\r\n}\r\nexport default Pool;\r\n\r\n\r\n\r\n","C:\\Users\\abomb\\Documents\\ProjetDW_aout\\hosting\\projet\\client\\src\\pages\\Home\\components\\Lobby.js",["110","111","112","113"],"import React, { Component } from 'react';\r\nimport { Button, Row, Col, Container, Badge } from 'react-bootstrap'\r\n\r\nclass Lobby extends Component{\r\n    render(){\r\n        return(\r\n        <Container fluid>\r\n            {this.props.userLobby.map((data, key)=>{\r\n                const user =' : '+ String(data.user);\r\n                \r\n                if(data.token === 1){\r\n                    return <Row key={key}><span style={{display: 'flex', justifyContent: 'center', alignItems: 'center', border:'2px solid #FF3535',borderRadius: '10px',color: '#FF3535' }}>| Owner |</span ><p style={{display: 'flex', justifyContent: 'center', alignItems: 'center', verticalAlign:'center'}}>{user}</p><br/></Row>\r\n                } \r\n                if(data.token ===0){\r\n                    return <Row key={key}><span style={{display: 'flex', justifyContent: 'center', alignItems: 'center', border:'2px solid #4185FA',borderRadius: '10px',color: '#4185FA' }}>| User |</span ><p style={{display: 'flex', justifyContent: 'center', alignItems: 'center', verticalAlign:'center'}} >{user}</p><br/></Row>;\r\n                }\r\n            })}\r\n        </Container>\r\n    )\r\n    }\r\n}\r\nexport default Lobby;",{"ruleId":"114","severity":1,"message":"115","line":44,"column":17,"nodeType":"116","messageId":"117","endLine":44,"endColumn":27},{"ruleId":"118","severity":1,"message":"119","line":370,"column":23,"nodeType":"120","messageId":"121","endLine":370,"endColumn":27},{"ruleId":"118","severity":1,"message":"122","line":493,"column":15,"nodeType":"120","messageId":"121","endLine":493,"endColumn":21},{"ruleId":"118","severity":1,"message":"123","line":543,"column":19,"nodeType":"120","messageId":"121","endLine":543,"endColumn":25},{"ruleId":"118","severity":1,"message":"124","line":558,"column":15,"nodeType":"120","messageId":"121","endLine":558,"endColumn":25},{"ruleId":"118","severity":1,"message":"125","line":564,"column":15,"nodeType":"120","messageId":"121","endLine":564,"endColumn":22},{"ruleId":"118","severity":1,"message":"126","line":565,"column":13,"nodeType":"120","messageId":"121","endLine":565,"endColumn":21},{"ruleId":"118","severity":1,"message":"127","line":4,"column":10,"nodeType":"120","messageId":"121","endLine":4,"endColumn":14},{"ruleId":"118","severity":1,"message":"128","line":9,"column":14,"nodeType":"120","messageId":"121","endLine":9,"endColumn":20},{"ruleId":"129","severity":1,"message":"130","line":264,"column":36,"nodeType":"131","messageId":"132","endLine":264,"endColumn":38},{"ruleId":"129","severity":1,"message":"130","line":278,"column":44,"nodeType":"131","messageId":"132","endLine":278,"endColumn":46},{"ruleId":"129","severity":1,"message":"130","line":290,"column":44,"nodeType":"131","messageId":"132","endLine":290,"endColumn":46},{"ruleId":"129","severity":1,"message":"130","line":304,"column":44,"nodeType":"131","messageId":"132","endLine":304,"endColumn":46},{"ruleId":"129","severity":1,"message":"130","line":321,"column":44,"nodeType":"131","messageId":"132","endLine":321,"endColumn":46},{"ruleId":"129","severity":1,"message":"130","line":339,"column":44,"nodeType":"131","messageId":"132","endLine":339,"endColumn":46},{"ruleId":"118","severity":1,"message":"133","line":419,"column":15,"nodeType":"120","messageId":"121","endLine":419,"endColumn":21},{"ruleId":"129","severity":1,"message":"130","line":466,"column":40,"nodeType":"131","messageId":"132","endLine":466,"endColumn":42},{"ruleId":"129","severity":1,"message":"130","line":476,"column":47,"nodeType":"131","messageId":"132","endLine":476,"endColumn":49},{"ruleId":"129","severity":1,"message":"130","line":483,"column":48,"nodeType":"131","messageId":"132","endLine":483,"endColumn":50},{"ruleId":"129","severity":1,"message":"130","line":495,"column":48,"nodeType":"131","messageId":"132","endLine":495,"endColumn":50},{"ruleId":"129","severity":1,"message":"130","line":509,"column":48,"nodeType":"131","messageId":"132","endLine":509,"endColumn":50},{"ruleId":"129","severity":1,"message":"130","line":526,"column":48,"nodeType":"131","messageId":"132","endLine":526,"endColumn":50},{"ruleId":"129","severity":1,"message":"130","line":544,"column":48,"nodeType":"131","messageId":"132","endLine":544,"endColumn":50},{"ruleId":"134","severity":1,"message":"135","line":583,"column":65,"nodeType":"136","endLine":583,"endColumn":68},{"ruleId":"137","severity":1,"message":"138","line":583,"column":65,"nodeType":"136","endLine":583,"endColumn":68},{"ruleId":"134","severity":1,"message":"135","line":630,"column":65,"nodeType":"136","endLine":630,"endColumn":68},{"ruleId":"137","severity":1,"message":"138","line":630,"column":65,"nodeType":"136","endLine":630,"endColumn":68},{"ruleId":"134","severity":1,"message":"135","line":673,"column":65,"nodeType":"136","endLine":673,"endColumn":68},{"ruleId":"137","severity":1,"message":"138","line":673,"column":65,"nodeType":"136","endLine":673,"endColumn":68},{"ruleId":"118","severity":1,"message":"139","line":2,"column":23,"nodeType":"120","messageId":"121","endLine":2,"endColumn":26},{"ruleId":"118","severity":1,"message":"140","line":2,"column":39,"nodeType":"120","messageId":"121","endLine":2,"endColumn":44},{"ruleId":"118","severity":1,"message":"141","line":2,"column":10,"nodeType":"120","messageId":"121","endLine":2,"endColumn":16},{"ruleId":"118","severity":1,"message":"139","line":2,"column":23,"nodeType":"120","messageId":"121","endLine":2,"endColumn":26},{"ruleId":"118","severity":1,"message":"140","line":2,"column":39,"nodeType":"120","messageId":"121","endLine":2,"endColumn":44},{"ruleId":"129","severity":1,"message":"142","line":8,"column":50,"nodeType":"131","messageId":"143","endLine":8,"endColumn":52},"react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","noDirectMutation","no-unused-vars","'user' is assigned a value but never used.","Identifier","unusedVar","'gameId' is assigned a value but never used.","'player' is assigned a value but never used.","'playerCard' is assigned a value but never used.","'selCard' is assigned a value but never used.","'userCard' is assigned a value but never used.","'Link' is defined but never used.","'Socket' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'pseudo' is assigned a value but never used.","jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","JSXOpeningElement","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","'Col' is defined but never used.","'Badge' is defined but never used.","'Button' is defined but never used.","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd"]